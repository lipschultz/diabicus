[{"test" : "lambda formula, result, context: is_prime(result) and (result - 1) % 4 == 0",
  "link" : "https://www.youtube.com/watch?v=SyJlRUBoVp0",
  "title": "The Prime Problem with a One Sentence Proof",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (1,2,4,6,12,24,36,48,60,120,180,240,360,720,840,1260,1680,2520,5040,7560,10080,15120,20160,25200,27720,45360,50400,55440,83160,110880,166320,221760,277200,332640,498960,554400,665280,720720,1081080,1441440,2162160)",
  "link" : "https://www.youtube.com/watch?v=2JM2oImb9Qg",
  "title": "5040 and other Anti-Prime Numbers",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A002182",
  "wiki" : "https://en.wikipedia.org/wiki/Highly_composite_number"
 },
 {"test" : "lambda formula, result, context: result in (20, 479001600, 43252003274489856000)",
  "link" : "https://www.youtube.com/watch?v=AOMQxLrCI7A",
  "title": "Speed Solve of a Rubik's Cube in Slow Motion",
  "source":"Numberphile",
  "weight": 0.5
 },
 {"test" : "lambda formula, result, context: is_surreal(result)",
  "link" : "https://www.youtube.com/watch?v=mPn2AdMH7UQ",
  "title": "Surreal Numbers (writing the first book)",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Surreal_number"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result == 3",
  "link" : "https://www.youtube.com/watch?v=5Mf0JpTI_gg",
  "title": "Three Gears are Possible",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result == 19",
  "link" : "https://www.youtube.com/watch?v=5Mf0JpTI_gg",
  "title": "Three Gears are Possible",
  "source":"Numberphile",
  "weight":0.25
 },
 {"test" : "lambda formula, result, context: is_int(result) and result in (4, 6)",
  "link" : "https://www.youtube.com/watch?v=SDw2Pu0-H4g",
  "title": "Consecutive Coin Flips",
  "source":"Numberphile",
  "weight":0.25
 },
 {"test" : "lambda formula, result, context: is_int(result) and result == 74",
  "link" : "https://www.youtube.com/watch?v=_-M_3oV75Lw",
  "title": "74 is cracked",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 0.2",
  "link" : "https://www.youtube.com/watch?v=AEpQ8YxupfQ",
  "title": "Money Catching",
  "source":"Numberphile",
  "weight":0.5
 },
 {"test" : "lambda formula, result, context: is_close(result, 0.6309297535714574, 1e-5)",
  "link" : "https://www.youtube.com/watch?v=y12Tt3bOmKA",
  "title": "Let's Talk About Sets",
  "source":"Numberphile",
  "weight":0.5
 },
 {"test" : "lambda formula, result, context: is_prime(result) and result % 10 in (1, 3, 7, 9)",
  "link" : "https://www.youtube.com/watch?v=YVvfY_lFUZ8",
  "title": "The Last Digit of Prime Numbers",
  "source":"Numberphile",
  "note" : "pairs of consecutive prime numbers"
 },
 {"test" : "lambda formula, result, context: result == 0 or is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=VTveQ1ndH1c",
  "title": "The Key to the Riemann Hypothesis",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (1, -24, 252, -1472, 4830, -6048, -16744, 84480, -113643, -115920, 534612, -370944, -577738, 401856, 1217160, 987136, -6905934, 2727432, 10661420, -7109760, -4219488, -12830688, 18643272, 21288960, -25499225, 13865712, -73279080, 24647168)",
  "link" : "https://www.youtube.com/watch?v=VTveQ1ndH1c",
  "title": "The Key to the Riemann Hypothesis",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A000594"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and result % 10 in (4, 9)",
  "link" : "https://www.youtube.com/watch?v=NjCIq58rZ8I",
  "title": "Partitions",
  "source":"Numberphile",
  "msg" : "The number of partitions for {result} is divisible by 5"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0  and (result-5) % 7 == 0",
  "link" : "https://www.youtube.com/watch?v=NjCIq58rZ8I",
  "title": "Partitions",
  "source":"Numberphile",
  "msg" : "The number of partitions for {result} is divisible by 7"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0  and (result-6) % 11 == 0",
  "link" : "https://www.youtube.com/watch?v=NjCIq58rZ8I",
  "title": "Partitions",
  "source":"Numberphile",
  "msg" : "The number of partitions for {result} is divisible by 11"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and (result-237) % 17303 == 0",
  "link" : "https://www.youtube.com/watch?v=NjCIq58rZ8I",
  "title": "Partitions",
  "source":"Numberphile",
  "msg" : "The number of partitions for {result} is divisible by 13"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and (result-2623) % 206839 == 0",
  "link" : "https://www.youtube.com/watch?v=NjCIq58rZ8I",
  "title": "Partitions",
  "source":"Numberphile",
  "msg" : "The number of partitions for {result} is divisible by 17"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and (result-1977147619) % 815655 == 0",
  "link" : "https://www.youtube.com/watch?v=NjCIq58rZ8I",
  "title": "Partitions",
  "source":"Numberphile",
  "msg" : "The number of partitions for {result} is divisible by 19"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0",
  "link" : "https://www.youtube.com/watch?v=NjCIq58rZ8I",
  "title": "Partitions",
  "source":"Numberphile",
  "msg" : "lambda f, result, c: '%d has approximately %d partitions' % (result, 1/(4*math.sqrt(3)*result) * math.exp(math.pi*math.sqrt(2*result/3)))"
 },
 {"test" : "lambda formula, result, context: is_error(result) or result in (3051, 4107)",
  "link" : "https://www.youtube.com/watch?v=aOT_bG-vWyg",
  "title": "The Parker Square",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=eAjMvpRMVDw",
  "title": "Crank Files",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], FIBONACCI_NUMBERS)",
  "link" : "https://www.youtube.com/watch?v=4izjrtR8Ozg",
  "title": "Little Fibs",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Fibonacci_number",
  "oeis" : "http://oeis.org/A000045"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], (1, 1, math.inf, 5, 6, 3, 3, 3, 3, 3))",
  "link" : "https://www.youtube.com/watch?v=2s4TqVAbfz4",
  "title": "Perfect Shapes in Higher Dimensions",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A060296",
  "wiki" : "https://en.wikipedia.org/wiki/Regular_polytope"
 },
 {"test" : "lambda formula, result, context: '%' in formula",
  "link" : "https://www.youtube.com/watch?v=WYsP1PhoAZc",
  "title": "Shuffling Card Trick",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], LUCAS_NUMBERS[1:]) or (is_int(result) and 0 < result < len(LUCAS_NUMBERS)-1 and ((LUCAS_NUMBERS[result]-1) % result == 0)) or '%' in formula",
  "link" : "https://www.youtube.com/watch?v=lEvXcTYqtKU",
  "title": "How they found the World's Biggest Prime Number",
  "source":"Numberphile",
  "oeis" : ["https://oeis.org/A000032", "https://oeis.org/A003010"],
  "wiki" : ["https://en.wikipedia.org/wiki/Lucas_number", "https://en.wikipedia.org/wiki/Lucas%E2%80%93Lehmer_primality_test"]
 },
 {"test" : "lambda formula, result, context: result == 74207281",
  "link" : "https://www.youtube.com/watch?v=tlpYjrbujG0",
  "title": "New World's Biggest Prime Number (PRINTED FULLY ON PAPER)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: isinstance(result, complex)",
  "link" : "https://www.youtube.com/watch?v=3BR8tK-LuB0",
  "title": "Fantastic Quaternions",
  "source":"Numberphile",
  "note" : "quaternions"
 },
 {"test" : "lambda formula, result, context: 'log' in formula",
  "link" : "https://www.youtube.com/watch?v=xRpR1rmPbJE",
  "title": "The iPhone of Slide Rules",
  "source":"Numberphile",
  "note" : "slide rules"
 },
 {"test" : "lambda formula, result, context: is_int(result) and (result in (1, 6, 9, 154, 253, 1114, 1390, 2618, 5611, 12871, 15286, 108609, 132574) or result in (9, ) or result in (0b0, 0b101, 0b11011, 0b1110111, 0b111101111, 0b11111011111, 0b1111110111111, 0b111111101111111, 0b11111111011111111, 0b1111111110111111111, 0b111111111101111111111, 0b11111111111011111111111) or all(v==str(result%10) for v in str(result)))",
  "link" : "https://www.youtube.com/watch?v=HPfAnX5blO0",
  "title": "Glitch Primes and Cyclops Numbers",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Repdigit",
  "oeis" : ["http://oeis.org/A265383", "http://oeis.org/A138148"]
 },
 {"test" : "lambda formula, result, context: is_int(result) and ((result - 4) % 9 == 0 or (result - 5) % 9 == 0 or result == 33)",
  "link" : "https://www.youtube.com/watch?v=wymmCdLdPvM",
  "title": "The Uncracked Problem with 33",
  "source":"Numberphile",
  "oeis" : ["https://oeis.org/A156638", "https://oeis.org/A060464"]
 },
 {"test" : "lambda formula, result, context: is_rational(result) and result > 2",
  "link" : "https://www.youtube.com/watch?v=Lihh_lMmcDw",
  "title": "Skewes' Massive Number",
  "source":"Numberphile",
  "msg" : "lambda f, r, c: 'Approximately %s primes below %s.' % (format_numbers.to_pretty_x10(scipy.integrate.quad(lambda x: 1/math.log(x), 2, r)[0], 2), format_numbers.to_pretty_x10(r))"
 },
 {"test" : "lambda formula, result, context: (is_int(result) and result > 0 and math.log(result, 2) % 1 == 0) or (is_rational(result) and result in (30.1, 17.6, 12.5, 9.7, 7.9, 6.7, 5.8, 5.1, 4.6, 0.301, 0.176, 0.125, 0.097, 0.079, 0.067, 0.058, 0.051, 0.046))",
  "link" : "https://www.youtube.com/watch?v=pKwsPBeSiOc",
  "title": "Powers of 2",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_rational(result) and (result == 0.25 or is_close(math.pi, result, 1e-3) or result in {2, 30, 312, 3140, 31414})",
  "link" : "https://www.youtube.com/watch?v=d0vY0CKYhPY",
  "title": "Pi and the Mandelbrot Set",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_number(result)",
  "link" : "https://www.youtube.com/watch?v=vA2cdHLKYB8",
  "title": "Pi and the Mandelbrot Set",
  "source":"Numberphile",
  "weight":0.25
 },
 {"test" : "lambda formula, result, context: False",
  "link" : "https://www.youtube.com/watch?v=UTCScjoPymA",
  "title": "Stars and Bars (and bagels)",
  "source":"Numberphile",
  "note" : "combinatorial: has_combinatorial_function"
 },
 {"test" : "lambda formula, result, context: is_rational(result) and result < sys.float_info.radix**sys.float_info.min_exp",
  "link" : "https://www.youtube.com/watch?v=WYijIV5JrKg",
  "title": "The Opposite of Infinity",
  "source":"Numberphile",
  "note" : "infinitesimal"
 },
 {"test" : "lambda formula, result, context: is_rational(result) and (result < sys.float_info.radix**sys.float_info.min_exp or result == math.inf)",
  "link" : "https://www.youtube.com/watch?v=BBp0bEczCNg",
  "title": "The Infinitesimal Monad",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result in (89, 196, 295, 394, 493, 592, 689, 691)",
  "link" : "https://www.youtube.com/watch?v=bN8PE3eljdA",
  "title": "What's special about 196?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result in (8, 4426165368, 92, 12)",
  "link" : "https://www.youtube.com/watch?v=jPcBU0Z2Hj8",
  "title": "The 8 Queen Problem",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], (0, 0, 1, 1, 2, 3, 7, 21, 49, 165, 552, 2176, 9988, 46972, 253293, 1388705))",
  "link" : "https://www.youtube.com/watch?v=aqyyhhnGraw",
  "title": "What is a Knot?",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A002863"
 },
 {"test" : "lambda formula, result, context: result in (8, 13, 14) or any([is_subsequence_of(context['result'][-3:], s) for s in ((1,7,6), (3,7,6), (2,4,7), (4,5,7), (3,8,2), (2,8,4), (4,5,4), (5,1,5), (5,1,8), (1,3,8), (6,3,5), (6,2,1), (7,6,1), (7,6,3), (8,2,3), (8,4,2))])",
  "link" : "https://www.youtube.com/watch?v=fjEB_wbemQA",
  "title": "The Curse of Lane 8",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 11800 or is_close(result, 147808829414345923316083210206383297601L)",
  "link" : "https://www.youtube.com/watch?v=Km024eldY1A",
  "title": "How many chess games are possible?",
  "source":"Numberphile",
  "note" : "Shannon's number: 10^120; Hardy's estimate: 10^(10^50)"
 },
 {"test" : "lambda formula, result, context: result in (1980, 45, 2025, 1892, 44, 1936, 2070, 46, 2116, 2162, 47, 2209, 2046, 2, 2048, 2184, 3, 2187, 13, 2197)",
  "link" : "https://www.youtube.com/watch?v=99stb2mzspI",
  "title": "Why 1980 was a great year to be born... but 2184 will be better",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 4",
  "link" : "https://www.youtube.com/watch?v=2g3sdzgSABM",
  "title": "Hunt for the Elusive 4th Klein Bottle",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 0 and formula.count('-') == 1 and all([is_rational(t) and float(t) == int(float(t)) == 1 for t in formula.split('-')])",
  "link" : "https://www.youtube.com/watch?v=AAsICMPwGPY",
  "title": "Klein Bottles",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], (2, 3, 4, 82000))",
  "link" : "https://www.youtube.com/watch?v=LNS1fabDkeA",
  "title": "Why 82,000 is an extraordinary number",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A258107"
 },
 {"init": "def farey_addition(context):\n    if len(history['result']) < 3:\n        return False\n    first = Fraction(context['result'][-3]).limit_denominator(234)\n    second = Fraction(context['result'][-2]).limit_denominator(234)\n    third = Fraction(context['result'][-1]).limit_denominator(234)\n    return Fraction(first.numerator + third.numerator, first.denominator + third.denominator) == second\n",
  "test" : "lambda formula, result, context: farey_addition(context)",
  "link" : "https://www.youtube.com/watch?v=0hlvhQZIOQw",
  "title": "Funny Fractions and Ford Circles",
  "source":"Numberphile",
  "note" : "function doesn't exist!"
 },
 {"test" : "lambda formula, result, context: 'sinh' in formula or 'π' in formula",
  "link" : "https://www.youtube.com/watch?v=zDJKFcZ0Kkg",
  "title": "More Hyperbolic Sports",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: 'sinh' in formula or 'π' in formula or 'cosh' in formula",
  "link" : "https://www.youtube.com/watch?v=u6Got0X41pY",
  "title": "More Hyperbolic Sports",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 7",
  "link" : "https://www.youtube.com/watch?v=gjVDqfUhXOY",
  "title": "Billionaire Mathematician",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (3121, 1024, 15625, 11529, 15621) or is_close(result, 0.32768)",
  "link" : "https://www.youtube.com/watch?v=U9qU20VmvaU",
  "title": "Monkeys and Coconuts",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 5",
  "link" : "https://www.youtube.com/watch?v=PnW5IRvgvLY",
  "title": "Ditching the Fifth Axiom",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 52",
  "link" : "https://www.youtube.com/watch?v=Y2lXsxmBx7E",
  "title": "52-Card Perfect Shuffles",
  "source":"Numberphile",
  "note" : "binary numbers"
 },
 {"test" : "lambda formula, result, context: result in (7, 10000, 52) or is_close(result, 4.538) or is_close(result, 8.55)",
  "link" : "https://www.youtube.com/watch?v=AxJubaijQbI",
  "title": "The Best (and Worst) Ways to Shuffle Cards",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 1 <= result <= 200",
  "link" : "https://www.youtube.com/watch?v=AqcVsShxzw8",
  "title": "1 to 200 on Google Image Search",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: formula in ('0+1', '0+0', '1+1')",
  "link" : "https://www.youtube.com/watch?v=siawhQBRC8I",
  "title": "Paper Calculator",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: False",
  "link" : "https://www.youtube.com/watch?v=UTCScjoPymA",
  "title": "Stars and Bars (and bagels)",
  "source":"Numberphile",
  "note" : "combinatorics"
 },
 {"test" : "lambda formula, result, context: any(f in formula for f in ('log', '*', '/'))",
  "link" : "https://www.youtube.com/watch?v=UTCScjoPymA",
  "title": "Stars and Bars (and bagels)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (58, 771216, 1e5, 1e7, 1e12)",
  "link" : "https://www.youtube.com/watch?v=l4bmZ1gRqCc",
  "title": "58 and other Confusing Numbers",
  "source":"Numberphile",
  "note" : "bases and number representations (+in other languages)"
 },
 {"test" : "lambda formula, result, context: result == 0 or isinstance(result, complex)",
  "link" : "https://www.youtube.com/watch?v=_qvp9a1x2UM",
  "title": "The Useless Number",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, 5+(-15)**.5) or is_close(result, 5-(-15)**.5) or is_close(result, (-15)**.5)",
  "link" : "https://www.youtube.com/watch?v=_qvp9a1x2UM",
  "title": "The Useless Number",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: '*' in formula or result in (624, 144)",
  "link" : "https://www.youtube.com/watch?v=9TAlEVDvXgw",
  "title": "Little Professor (Dr Grime's Toy Story)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: (is_rational(result) and (any([is_close(result, v, 1e-7) for v in (1.411213562, 31.11269837, math.pi, (17)**.5)]) or result in (17, 8, 888))) or (is_error(result) and result.msg == 'divide by zero')",
  "link" : "https://www.youtube.com/watch?v=ovsYv-b-wWI",
  "title": "Calculator Unboxing #7 (Gaxio)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: (is_error(result) and result.msg == 'divide by zero') or (any(is_close(result, v, 1e-7) for v in (0.9999997, 1.9999998, 4.9999992)) or result in (40, 24089, 30, 39.9))",
  "link" : "https://www.youtube.com/watch?v=8Nzi1h2m7pE",
  "title": "Calculator Unboxing #6 (Staples collection)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (8000, 13, 14, 9, 4, 788, 901, 17) or (is_real(result) and 6 <= result <= 11) or formula in ('8+5', '7+7', '5+4', '4+0', '715+73', '844+57') or is_close(result, 2.83333333333, 1e-7)",
  "link" : "https://www.youtube.com/watch?v=ZbKYmfjMPVM",
  "title": "Calculator Unboxing #5 (Little Professor)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (3, 4, 5, 6, 15, 30, 60, 17, 21)",
  "link" : "https://www.youtube.com/watch?v=87uo2TPrsl8",
  "title": "The Amazing Heptadecagon (17-gon)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 2.5",
  "link" : "https://www.youtube.com/watch?v=GznQgTdEdI4",
  "title": "Super Egg",
  "source":"Numberphile",
  "weight":0.5
 },
 {"test" : "lambda formula, result, context: result == random.random()",
  "link" : "https://www.youtube.com/watch?v=Obg7JPd6cmw",
  "title": "Should you catch a tossed coin?",
  "source":"Numberphile",
  "note" : "randomness"
 },
 {"test" : "lambda formula, result, context: (is_rational(result) and is_close(result, 0.51, 1e-3)) or result == random.random()",
  "link" : "https://www.youtube.com/watch?v=AYnJv68T3MM",
  "title": "How random is a coin toss?",
  "source":"Numberphile",
  "note" : "randomness"
 },
 {"test" : "lambda formula, result, context: result in (399, 935, 2015, 2915, 4991, 5719, 7055, 8855, 12719, 18095, 20705, 20999, 22847, 29315, 31535, 46079, 51359, 60059, 63503, 67199, 73535, 76751, 80189, 81719, 88559, 90287, 104663, 117215, 120581, 147455, 152279, 155819, 162687, 191807, 194327, 196559, 214199, 218735, 230159, 265895, 357599, 388079, 390335, 482143, 588455, 653939, 663679, 676799, 709019, 741311, 760655, 761039, 776567, 798215, 880319, 895679, 913031, 966239, 966779, 973559, 1010735, 1017359, 1097459, 1162349, 1241099, 1256759, 1525499, 1554119, 1584599, 1587599, 1659119, 1707839, 1710863, 1719119, 1811687, 1901735, 1915199, 1965599, 2048255, 2055095, 2150819, 2193119, 2249999, 2276351, 2416679, 2581319, 2647679, 2756159, 2924099, 3106799, 3228119, 3235967, 3332999, 3354695, 3419999, 3441239, 3479111, 3483479, 3700619, 3704399, 3741479, 4107455, 4285439, 4452839, 4587839, 4681247, 4853759, 4874639, 5058719, 5455799, 5669279, 5807759, 6023039, 6514199, 6539819, 6656399, 6730559, 6959699, 6994259, 7110179, 7127999, 7234163, 7274249, 7366463, 8159759, 8164079, 8421335, 8699459, 8734109, 9224279, 9349919, 9486399, 9572639, 9694079, 9868715)",
  "link" : "https://www.youtube.com/watch?v=yfr3BIk6KFc",
  "title": "Something special about 399 (and 2015)",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Lucas%E2%80%93Carmichael_number",
  "oeis" : "https://oeis.org/A006972",
  "note" : "maybe calculate these instead",
  "msg" : "A Lucas-Carmichael number"
 },
 {"test" : "lambda formula, result, context: result in (6, 28, 496, 8128, 33550336, 8589869056, 137438691328, 2305843008139952128, 2658455991569831744654692615953842176, 191561942608236107294793378084303638130997321548169216)",
  "link" : "https://www.youtube.com/watch?v=q8n15q1v4Xo",
  "title": "Perfect Number Proof",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Perfect_number",
  "oeis" : "https://oeis.org/A000396",
  "note" : "maybe calculate these instead",
  "msg" : "A Perfect Number"
 },
 {"test" : "lambda formula, result, context: result in (6, 28, 496, 8128, 33550336, 8589869056, 137438691328, 2305843008139952128, 2658455991569831744654692615953842176, 191561942608236107294793378084303638130997321548169216) or result in (2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279, 2203, 2281, 3217, 4253, 4423, 9689, 9941, 11213, 19937, 21701, 23209, 44497, 86243, 110503, 132049, 216091, 756839, 859433, 1257787, 1398269, 2976221, 3021377, 6972593, 13466917, 20996011, 24036583, 25964951, 30402457, 32582657) or result in (3, 7, 31, 127, 8191, 131071, 524287, 2147483647, 2305843009213693951, 618970019642690137449562111, 162259276829213363391578010288127, 170141183460469231731687303715884105727)",
  "link" : "https://www.youtube.com/watch?v=T0xKHwQH-4I",
  "title": "Perfect Numbers and Mersenne Primes",
  "source":"Numberphile",
  "wiki" : ["https://en.wikipedia.org/wiki/Perfect_number", "https://en.wikipedia.org/wiki/Mersenne_prime"],
  "oeis" : ["https://oeis.org/A000396", "https://oeis.org/A000043"],
  "note" : "maybe calculate these instead"
 },
 {"test" : "lambda formula, result, context: is_error(result)",
  "link" : "https://www.youtube.com/watch?v=6a0zEXH0ZMg",
  "title": "Wrong Turn on the Dragon",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 0.5 or any(is_close(result, v, 1e-9) for v in (2**.5, 1/3, ))",
  "link" : "https://www.youtube.com/watch?v=6Lm9EHhbJAY",
  "title": "Euclid's Big Problem",
  "source":"Numberphile",
  "note" : "something is raised to the third power"
 },
 {"test" : "lambda formula, result, context: is_close(result, 1/3, 1e-9)",
  "link" : "https://www.youtube.com/watch?v=SL2lYcggGpc",
  "title": "How to Trisect an Angle with Origami",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], (0, 1, 1, 2, 1, 3, 2, 3, 1, 4, 3, 5, 2, 5, 3, 4, 1, 5, 4, 7, 3, 8, 5, 7, 2, 7, 5, 8, 3, 7, 4, 5, 1, 6, 5, 9, 4, 11, 7, 10, 3, 11, 8, 13, 5, 12, 7, 9, 2, 9, 7, 12, 5, 13, 8, 11, 3, 10, 7, 11, 4, 9, 5, 6, 1, 7, 6, 11, 5, 14, 9, 13, 4, 15, 11, 18, 7, 17, 10, 13, 3, 14, 11, 19, 8, 21, 13, 18, 5, 17, 12, 19)) or is_subsequence_of(context['result'][-3:], (1/1, 1/2, 2/1, 1/3, 3/2, 2/3, 3/1, 1/4, 4/3, 3/5, 5/2, 2/5, 5/3, 3/4, 4/1))",
  "link" : "https://www.youtube.com/watch?v=DpwUVExX27E",
  "title": "Infinite Fractions",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A002487"
 },
 {"test" : "lambda formula, result, context: isinstance(result, complex)",
  "link" : "https://www.youtube.com/watch?v=izdZPx89ph4",
  "title": "Imaginary Erdős Number",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (-1/12, math.inf, 1/4, 26)",
  "link" : "https://www.youtube.com/watch?v=E-d9mgo8FGk",
  "title": "Sum of Natural Numbers (second proof and extra footage)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: any(len(context['result']) >= len(s) and context['result'][-len(s):] == s for s in ((1, 1), (1, 2, 1), (1, 3, 3, 1), (1, 4, 1)))",
  "link" : "https://www.youtube.com/watch?v=mX0NB9IyYpU",
  "title": "Math and Movies (Animation at Pixar)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_error(result)",
  "link" : "https://www.youtube.com/watch?v=Yajonhixy4g",
  "title": "All Triangles are Equilateral",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (8, 17, 32, 54, 57, 100, 145, 177, 320, 368, 512, 593, 945, 1124, 1649, 2169, 2530, 4240, 5392, 6250, 7073, 8361, 16580, 18785, 20412, 23401, 32993, 60049, 65792, 69632, 93312, 94932, 131361, 178478, 262468, 268705, 397585, 423393, 524649, 533169)",
  "link" : "https://www.youtube.com/watch?v=Lsu2dIr_c8k",
  "title": "Leyland Numbers",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Leyland_number",
  "oeis" : "https://oeis.org/A076980"
 },

 {"test" : "lambda formula, result, context: result in (17, 593, 32993, 2097593, 8589935681, 59604644783353249, 523347633027360537213687137, 43143988327398957279342419750374600193, 4318114567396436564035293097707729426477458833, 5052785737795758503064406447721934417290878968063369478337)",
  "link" : "https://www.youtube.com/watch?v=Lsu2dIr_c8k",
  "title": "Leyland Numbers",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Leyland_number",
  "oeis" : "https://oeis.org/A094133",
  "msg" : "Leyland prime"
 },
 {"test" : "lambda formula, result, context: result in (1e6, 2, 11492, 14522, 5613487, 250000, 4157, 1) or is_close(result, (66666.8, 1.052, 1.69, math.pi)) or any(is_subsequence_of(context['result'][-s:], s) for s in ((4, 8, 0, 0, 0, 4, 4, 8, 0, 0, 2), (1, 5, 6, 5, 5, 1, 5, 6, 5, 6, 6, 6, 1, 1, 1), (03, 15, 18, 15, 20), (13, 01, 20, 20), (25, 14, 08, 05, 23, 15, 08, 12, 02), (3, 1, 4, 1, 5, 9)))",
  "link" : "https://www.youtube.com/watch?v=99Welatppzk",
  "title": "The Making of a Mile of Pi",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (1e6, 8, 762, 999999, 3333333, 216176, 0456789, 500000, 2, 4, 100000, 996482, 5) or is_close(result, (1/15, math.pi))",
  "link" : "https://www.youtube.com/watch?v=0r3cEKZiLmg",
  "title": "Mile of Pi",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], FIBONACCI_NUMBERS) or is_subsequence_of(context['result'][-3:], LUCAS_NUMBERS) or (is_rational(result) and is_close(result, GOLDEN_RATIO))",
  "link" : "https://www.youtube.com/watch?v=PeUbRXnbmms",
  "title": "Lucas Numbers",
  "source":"Numberphile",
  "oeis" : ["https://oeis.org/A000045", "https://oeis.org/A000032"]
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], FIBONACCI_NUMBERS) or is_subsequence_of(context['result'][-3:], (2308, 4261, 6569, 10830, 17399, 28229, 45628, 73857, 119485, 193342, 312827, 506169, 818996, 1325165, 2144161, 3469326, 5613487, 9082813, 14696300, 23779113, 38475413, 62254526, 100729939, 162984465, 263714404, 426698869, 690413273, 1117112142, 1807525415, 2924637557, 4732162972, 7656800529)) or (is_rational(result) and is_close(result, GOLDEN_RATIO)) or (len(context['result']) >= 2 and is_rational(context['result'][-2]) and is_rational(context['result'][-1]) and is_close(context['result'][-1]/context['result'][-2], GOLDEN_RATIO, 1e-3))",
  "link" : "https://www.youtube.com/watch?v=D8ntDpBm6Ok",
  "title": "Brady Numbers",
  "source":"Numberphile",
  "oeis" : ["https://oeis.org/A000045", "https://oeis.org/A247698"]
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], FIBONACCI_NUMBERS) or (is_rational(result) and is_close(result, GOLDEN_RATIO)) or (len(context['result']) >= 2 and is_rational(context['result'][-2]) and is_rational(context['result'][-1]) and is_close(context['result'][-1]/context['result'][-2], GOLDEN_RATIO, 1e-3)) or (len(context['result']) >= 3 and all(is_rational(v) for v in context['result'][-3:]) and context['result'][-3]+context['result'][-2] == context['result'][-1])",
  "link" : "https://www.youtube.com/watch?v=dTWKKvlZB08",
  "title": "Golden Proof",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A000045"
 },
 {"test" : "lambda formula, result, context: result in (45, 26, 18, 89, 91.3, 90)",
  "link" : "https://www.youtube.com/watch?v=m5evLoL0xwg",
  "title": "The Three Square Geometry Problem",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1, 6, 3, 9, 28, 14, 63728127, 949) or '3*Ans+1' in formula or '2*Ans' in formula or result in (1, 2, 3, 6, 7, 9, 12, 15, 18, 19, 21, 24, 25, 27, 30, 33, 36, 37, 39, 42, 43, 45, 48, 51, 54, 55, 57, 60, 63, 66, 69, 72, 73, 75, 78, 79, 81, 84, 87, 90, 93, 96, 97, 99, 102, 105, 108, 109, 111, 114, 115, 117, 120, 123, 126, 127, 129, 132, 133, 135, 138, 141) or result in (2, 3, 7, 27, 703, 10087, 35655, 270271, 362343, 381727, 626331, 1027431, 1126015, 8088063, 13421671, 20638335, 26716671, 56924955, 63728127, 217740015, 1200991791, 1827397567, 2788008987, 12235060455) or result in (0, 1, 3, 6, 7, 9, 12, 15, 18, 19, 21, 24, 25, 27, 30, 33, 36, 37, 39, 42, 43, 45, 48, 51, 54, 55, 57, 60, 63, 66, 69, 72, 73, 75, 78, 79, 81, 84, 87, 90, 93, 96, 97, 99, 102, 105, 108, 109, 111, 114, 115, 117, 120, 123, 126, 127, 129, 132, 133, 135, 138, 141, 144, 145)",
  "link" : "https://www.youtube.com/watch?v=5mFpVDpKX70",
  "title": "UNCRACKABLE? The Collatz Conjecture",
  "source":"Numberphile",
  "oeis" : ["https://oeis.org/A177729", "https://oeis.org/A060412", "https://oeis.org/A061641"]
 },
 {"test" : "lambda formula, result, context: result in (25, 121, 125, 126, 127, 128, 153, 216, 289, 343, 347, 625, 688, 736, 1022, 1024, 1206, 1255, 1260, 1285, 1296, 1395, 1435, 1503, 1530, 1792, 1827, 2048, 2187, 2349, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2592 ,2737, 2916, 3125, 3159, 3281, 3375, 3378, 3685, 3784, 3864, 3972, 4088, 4096, 4106, 4167, 4536, 4624, 4628, 5120, 5776, 5832, 6144, 6145, 6455, 6880, 7928, 8092, 8192, 9025, 9216, 9261, 11264, 11664, 12850, 13825, 14641, 15552, 15585, 15612, 15613, 15617, 15618, 15621, 15622, 15623, 15624, 15626, 15632, 15633, 15642, 15645, 15655, 15656, 15662, 15667, 15688, 16377, 16384, 16447, 16875, 17536, 18432, 19453, 19683, 19739, 10192, 8326197504, 99999999, 11111111111, 123456789, 987654321, 268435179, 8, 28, 46, 78, 98)",
  "link" : "https://www.youtube.com/watch?v=I7v2wAXFQpc",
  "title": "Friedman Numbers",
  "source":"Numberphile",
  "oeis" : ["https://oeis.org/A036057", "https://oeis.org/A080035"],
  "wiki" : "https://en.wikipedia.org/wiki/Friedman_number"
 },
 {"test" : "lambda formula, result, context: is_close(result, (2**.5, 1-1/(2**.5)), 1e-7)",
  "link" : "https://www.youtube.com/watch?v=OEMA6jhi5Qo",
  "title": "Wobbly Circles",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 1584",
  "link" : "https://www.youtube.com/watch?v=HuKl3XuEmj4",
  "title": "Dice Bucket",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 1962",
  "link" : "https://www.youtube.com/watch?v=Qcv1IqHWAzg",
  "title": "Stable Marriage Problem",
  "source":"Numberphile",
  "weight":0.25
 },
 {"test" : "lambda formula, result, context: result == 38 or result == 3",
  "link" : "https://www.youtube.com/watch?v=ZkVSRwFWjy0",
  "title": "Magic Hexagon",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_rational(result) and 0 <= result <= 0.25",
  "link" : "https://www.youtube.com/watch?v=OuF-WB7mD6k",
  "title": "Fix a Wobbly Table (with Math)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (3, 5, 17, 257, 65537, 4294967297, 31, 331, 3331, 33331, 333331, 3333331, 33333331, 333333331)",
  "link" : "https://www.youtube.com/watch?v=4UgZ5FqdYIQ",
  "title": "Strong Law of Small Numbers",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (14972, 17087, 23, 1121, 2121)",
  "link" : "https://www.youtube.com/watch?v=VDYzSzDaHuM",
  "title": "Can a number be boring? (feat 14972)",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A046704"
 },
 {"test" : "lambda formula, result, context: result in (1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, 31131211131221, 13211311123113112211, 11131221133112132113212221, 3113112221232112111312211312113211, 1321132132111213122112311311222113111221131221, 11131221131211131231121113112221121321132132211331222113112211, 311311222113111231131112132112311321322112111312211312111322212311322113212221) or (is_rational(result) and is_close(result, 1.303577269))",
  "link" : "https://www.youtube.com/watch?v=ea7lJkEhytA",
  "title": "Look-and-Say Numbers (feat John Conway)",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A005150",
  "wiki" : "https://en.wikipedia.org/wiki/Look-and-say_sequence"
 },
 {"test" : "lambda formula, result, context: result in (5, 13, 563)",
  "link" : "https://www.youtube.com/watch?v=eZUa5k_VIZg",
  "title": "What do 5, 13 and 563 have in common?",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A007540",
  "wiki" : "https://en.wikipedia.org/wiki/Wilson_prime"
 },
 {"test" : "lambda formula, result, context: is_real(result) and (result in {27, 7625597484987} or (result > sys.float_info.max))",
  "link" : "https://www.youtube.com/watch?v=txajrEOTkuY",
  "title": "Graham's Number Escalates Quickly",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: isinstance(result, complex) or (is_rational(result) and 0 < result <= 2)",
  "link" : "https://www.youtube.com/watch?v=NGMRB4O922I",
  "title": "The Mandelbrot Set",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Mandelbrot_set"
 },
 {"test" : "lambda formula, result, context: is_real(result) and result >= 13",
  "link" : "https://www.youtube.com/watch?v=HX8bihEe3nA",
  "title": "What is Graham's Number? (feat Ron Graham)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: isinstance(result, complex)",
  "link" : "https://www.youtube.com/watch?v=shEk8sz1oOw",
  "title": "Fundamental Theorem of Algebra",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result >= 3",
  "link" : "https://www.youtube.com/watch?v=xPk3SZiFEvQ",
  "title": "Happy Ending Problem",
  "source":"Numberphile",
  "msg" : "lambda f, r, c: 'Conjecture: To guarantee a convex %d-gon, you need %s points with no three points in a line.' % (r, format_numbers.to_pretty_x10((2**(r-2))+1))"
 },
 {"test" : "lambda formula, result, context: is_rational(result) and is_close(result, (36.7879, 0.367879))",
  "link" : "https://www.youtube.com/watch?v=ZWib5olGbQ0",
  "title": "Mathematical Way to Choose a Toilet",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, 0.11111111111, 1e-11) or result == 0 or (is_error(result) and result.msg == 'divide by zero') or result in {23, 21}",
  "link" : "https://www.youtube.com/watch?v=sxLdGjV-_yg",
  "title": "Calculator Unboxing #4 (Bamboo Calculator)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 6",
  "link" : "https://www.youtube.com/watch?v=xdiL-ADRTxQ",
  "title": "Friends and Strangers Theorem",
  "source":"Numberphile",
  "msg" : "In a social network of size 6, there must be three people who are all friends or all not friends."
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and result % 2 == 1",
  "link" : "https://www.youtube.com/watch?v=8l-La9HEUIU",
  "title": "Odd Equations",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 3 or is_close(result, (1/3, 2/3), 1e-7)",
  "link" : "https://www.youtube.com/watch?v=7u6kFlWZOWg",
  "title": "Monty Hall Problem for Dummies",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 3 or is_close(result, (1/3, 2/3), 1e-7)",
  "link" : "https://www.youtube.com/watch?v=4Lb-6rxZxx0",
  "title": "Monty Hall Problem",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {2, 12, 20}",
  "link" : "https://www.youtube.com/watch?v=Nyo3TjKyu_c",
  "title": "How many panels on a soccer ball?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {808017424794512875886459904961710757005754368000000000, 83155536130867200003, 196883}",
  "link" : "https://www.youtube.com/watch?v=xOCe5HUObD4",
  "title": "Life, Death and the Monster",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {26, 808017424794512875886459904961710757005754368000000000, 196883}",
  "link" : "https://www.youtube.com/watch?v=jsSeoGpiWsw",
  "title": "Monster Group",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 3228}",
  "link" : "https://www.youtube.com/watch?v=00Qu1kgsGpM",
  "title": "Professors React to 2048",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {362880, 1764}",
  "link" : "https://www.youtube.com/watch?v=CwIAfkuXc5A",
  "title": "Order from Chaos",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {2002, 4}",
  "link" : "https://www.youtube.com/watch?v=GItmC9lxeco",
  "title": "Poincaré Conjecture",
  "source":"Numberphile",
  "weight":0.25
 },
 {"test" : "lambda formula, result, context: is_close(result, [1/v for v in (15, 23, 39, 63, 95, 135, 183, 239, 303, 375, 455, 543, 639, 743, 855, 975, 1103, 1239, 1383, 1535, 1695, 1863, 2039, 2223, 2415, 2615, 2823, 3039, 3263, 3495, 3735, 3983, 4239, 4503, 4775, 5055, 5343, 5639, 5943, 6255, 6575, 6903, 7239, 7583, 7935, 8295, 8663, 9039, 9423, 9815)], 1e-9)",
  "link" : "https://www.youtube.com/watch?v=sG_6nlMZ8f4",
  "title": "Epic Circles",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A242412"
 },
 {"test" : "lambda formula, result, context: '+' in formula or result == 59 or result == 82",
  "link" : "https://www.youtube.com/watch?v=lNuPy-r1GuQ",
  "title": "Domino Addition",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (1812, 127000, 100000, 50000, 28000, -21, 60000, 33000, 422000, 10000)",
  "link" : "https://www.youtube.com/watch?v=3T7jMcstxY0",
  "title": "The Greatest Ever Infographic",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (9, 22, 3, 4, 0, math.inf)",
  "link" : "https://www.youtube.com/watch?v=7dcDuVyzb8Y",
  "title": "Measuring Coastline",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295) or result in (0, 1, 2, 5, 26, 677, 458330, 210066388901, 44127887745906175987802, 1947270476915296449559703445493848930452791205, 3791862310265926082868235028027893277370233152247388584761734150717768254410341175325352026) or result == -7/4 or isinstance(result, complex) or formula in ('2*Ans+1', 'Ans**2+1') or is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=09JslnY7W_k",
  "title": "63 and -7/4 are special",
  "source":"Numberphile",
  "oeis" : ["http://oeis.org/A000225", "http://oeis.org/A003095"],
  "note" : "exact formula given -- should adjust it to be more forgiving, also any formula of form Ans**2+c (c is Integer, c != 0, -1, -2) is acceptable"
 },
 {"test" : "lambda formula, result, context: result in (math.inf, 0) or is_close(result, (-1/12, 1/120), 1e-9)",
  "link" : "https://www.youtube.com/watch?v=0Oazb7IWzbA",
  "title": "Why -1/12 is a gold nugget",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == math.pi",
  "link" : "https://www.youtube.com/watch?v=TUErNWBOkUM",
  "title": "Pi me a River",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (311, 157) or is_close(result, (math.pi, 22/8, 7/9, math.pi/4, 2*math.pi)) or context['result'][-50:] == PI_DIGITS[:50]",
  "link" : "https://www.youtube.com/watch?v=E36qMxXGo3A",
  "title": "Pi Prog Rock",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, (math.pi**2/6, 1.202056903159594, -1/12)) or isinstance(result, complex) or result in {1, -1, 1/2} or (is_int(result) and result < 0 and result % 2 == 0) or is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=d6c6uIyieoo",
  "title": "Riemann Hypothesis",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 2",
  "link" : "https://www.youtube.com/watch?v=OAss481FfAQ",
  "title": "Brussels Sprouts",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result >= 2",
  "link" : "https://www.youtube.com/watch?v=OAss481FfAQ",
  "title": "Brussels Sprouts",
  "source":"Numberphile",
  "msg" : "lambda f, r, c: 'A game of Brussels Sprouts with %s starting vertices will end after %s moves.' % (format_numbers.to_pretty_x10(r), format_numbers.to_pretty_x10(5*r-2))"
 },
 {"test" : "lambda formula, result, context: result in (2, 3)",
  "link" : "https://www.youtube.com/watch?v=E8kUJL04ELA",
  "title": "Does John Conway hate his Game of Life?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, (0.9895192582062144, 0.367879422971105), 1e-9) or 'log' in formula",
  "link" : "https://www.youtube.com/watch?v=vzV50goW_WM",
  "title": "Log Tables (extra bit)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 10 <= result <= 99",
  "link" : "https://www.youtube.com/watch?v=y8acoaakvPM",
  "title": "Fifth Root Trick",
  "source":"Numberphile",
  "msg" : "lambda f, r, c: '%d^5 = %d * 10 + %d' % (r, r**5-r / 10, r)"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 10 <= result <= 99",
  "link" : "https://www.youtube.com/watch?v=y8acoaakvPM",
  "title": "Fifth Root Trick",
  "source":"Numberphile",
  "msg" : "lambda f, r, c: '%d^5 = %d * 10 + %d' % (r, r**5-r / 10, r)"
 },
 {"test" : "lambda formula, result, context: result in {561, 1105, 1729, 2465, 2821, 6601, 8911, 10585, 15841, 29341, 41041, 46657, 52633, 62745, 63973, 75361, 101101, 115921, 126217, 162401, 172081, 188461, 252601, 278545, 294409, 314821, 334153, 340561, 399001, 410041, 449065, 488881, 512461}",
  "link" : "https://www.youtube.com/watch?v=jbiaz_aHHUQ",
  "title": "Liar Numbers",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A002997"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 1",
  "link" : "https://www.youtube.com/watch?v=HvMSRWTE2mI",
  "title": "Fool-Proof Test for Primes",
  "source":"Numberphile",
  "msg" : "lambda f, r, c: 'All coefficients in (x - 1)^%s - (x^%s - 1) are%s divisible by %s.' % (format_numbers.to_pretty_x10(r, prepend='(', append=')'), format_numbers.to_pretty_x10(r, prepend='(', append=')'), '' if is_prime(r) else ' not', format_numbers.to_pretty_x10(r, prepend='(', append=')'))"
 },
 {"test" : "lambda formula, result, context: True",
  "link" : "https://www.youtube.com/watch?v=Yexc19j3TjE",
  "title": "Why do people hate mathematics?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {26534728821064, 64, 260, 520, 130, 210, 282, 140}",
  "link" : "https://www.youtube.com/watch?v=ab_dY3dZFHM",
  "title": "Knight's Tour",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {-1/12, 1/2, 1/4}",
  "link" : "https://www.youtube.com/watch?v=w-I6XTVZXww",
  "title": "ASTOUNDING: 1 + 2 + 3 + 4 + 5 + ... = -1/12",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, math.pi, 1e-11)",
  "link" : "https://www.youtube.com/watch?v=NPoj8lk9Fo4",
  "title": "Pi is Beautiful",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: formula in {'7*0.1428572', '1/0'} or is_close(result, (1.0000004, 0.9999999), 1e-7) or result in {40, math.inf}",
  "link" : "https://www.youtube.com/watch?v=wyl-V0mrEio",
  "title": "Calculator Unboxing #3 (Casio Watch)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: formula in {'1/9', '17^(1/2)', 17^0.5', '17^.5'} or result in {1/9, 17**.5, 55.5}",
  "link" : "https://www.youtube.com/watch?v=6aDBGTWsydY",
  "title": "Calculator Unboxing #2 (Casio fx)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == random.random()",
  "link" : "https://www.youtube.com/watch?v=1O69uBL22nY",
  "title": "NSA Surveillance (an extra bit)",
  "source":"Numberphile",
  "note" : "random"
 },
 {"test" : "lambda formula, result, context: result == 4",
  "link" : "https://www.youtube.com/watch?v=qbkH_0TNdk0",
  "title": "More about Pebbling a Chessboard",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: 'mod' in formula or result in PRIME_NUMBERS[1000:] or result in {115792089210356248762697446949407573530086143415290314195533631308867097853951, 115792089210356248762697446949407573530086143415290314195533631, 115792089210356248762697446949407573529996955224135760342422259061068512044369, 0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b, 0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296, 0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5, 0xc49d360886e704936a6678e1139d26b7819f7e90, 0x7efba1662985be9403cb055c75d4f7e0ce8d84a9c5114abcaf3177680104fa0d}",
  "link" : "https://www.youtube.com/watch?v=ulg_AHBOIQU",
  "title": "How did the NSA hack our emails?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {math.inf, 2}",
  "link" : "https://www.youtube.com/watch?v=lFQGSGsXbXE",
  "title": "Pebbling a Chessboard",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {4, 4531985219092, 2626652048471, 1905333170621, 7, 728, 713298878, 41}",
  "link" : "https://www.youtube.com/watch?v=yDWPi1pZ0Po",
  "title": "Connect Four",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 10",
  "link" : "https://www.youtube.com/watch?v=kOClr_bew38",
  "title": "10:10 in Watch Advertisements",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {87539319, 1729, 6963472309248}",
  "link" : "https://www.youtube.com/watch?v=bJDiZi9dqOg",
  "title": "87,539,319",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, (math.pi**4/90, 3.11037552421026430215)) or result == math.pi",
  "link" : "https://www.youtube.com/watch?v=K305Vu7hFg0",
  "title": "Pi and Four Fingers",
  "source":"Numberphile",
  "notes": "bases 16 and 8"
 },
 {"test" : "lambda formula, result, context: result == 0588235294117647 or result in {7, 17, 19, 23, 29, 47, 59, 61, 97, 109, 113, 131, 149, 167, 179, 181, 193, 223, 229, 233, 257, 263, 269, 313, 337, 367, 379, 383, 389, 419, 433, 461, 487, 491, 499, 503, 509, 541, 571, 577, 593, 619, 647, 659, 701, 709, 727, 743, 811, 821, 823, 857, 863, 887, 937, 941, 953, 971, 977, 983} or (is_int(result) and result % 7 == 0) or result in ((10**(p-1)-1)/p for p in (7, 17, 19, 23, 29, 47, 59, 61, 97, 109, 113, 131, 149, 167, 179, 181, 193, 223, 229, 233, 257, 263, 269, 313, 337, 367, 379, 383, 389, 419, 433, 461, 487, 491, 499, 503, 509, 541, 571, 577, 593, 619, 647, 659, 701, 709, 727, 743, 811, 821, 823, 857, 863, 887, 937, 941, 953, 971, 977, 983)) or is_close(result, 37.395)",
  "link" : "https://www.youtube.com/watch?v=WUlaUalgxqI",
  "title": "Cyclic Numbers",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A001913"
 },
 {"test" : "lambda formula, result, context: is_int(result)",
  "link" : "https://www.youtube.com/watch?v=_YysNM2JoFo",
  "title": "Sloane's Gap",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: any(result == v for v in (1.9999998, 1e-5, 1.99999999999, 0.99999999999)) or (is_error(result) and result.msg == 'divide by zero') or result in {25, 2, 41, 27} or formula == '5+2*5'",
  "link" : "https://www.youtube.com/watch?v=eaJtjJNrWf0",
  "title": "Calculator Unboxing #1",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {3987, 12, 4365, 4472, 1782, 1841, 1922}",
  "link" : "https://www.youtube.com/watch?v=ReOQ300AcSU",
  "title": "Homer Simpson vs Pierre de Fermat",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {223, 75, 107, 21} or (is_real(result) and 40 <= result < 50)",
  "link" : "https://www.youtube.com/watch?v=CfoKor05k1I",
  "title": "Politics and Numbers",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0",
  "link" : "https://www.youtube.com/watch?v=qiNcEguuFSA",
  "title": "Fermat's Last Theorem",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 6 or (is_int(result) and result > 0 and result**0.5 % 1 == 0)",
  "link" : "https://www.youtube.com/watch?v=Y30VF3cSIYQ",
  "title": "The Legend of Question Six",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], FIBONACCI_NUMBERS) or is_subsequence_of(context['result'][-3:], (0, 1, 1, 2, 3, 5, 1, 6, 0, 6, 6, 5, 4, 2, 6, 1)) or is_subsequence_of(context['result'][-3:], (1, 3, 8, 6, 20, 24, 16, 12, 24, 60, 10, 24, 28, 48, 40, 24, 36, 24, 18, 60, 16, 30, 48, 24, 100, 84, 72, 48, 14, 120, 30, 48, 40, 36, 80, 24, 76, 18, 56, 60, 40, 48, 88, 30, 120, 48, 32, 24, 112, 300, 72, 84, 108, 72, 20, 48, 72, 42, 58, 120, 60, 30, 48, 96, 140, 120, 136))",
  "link" : "https://www.youtube.com/watch?v=Nu-lW-Ifyec",
  "title": "Fibonacci Mystery",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A001175"
 },
 {"test" : "lambda formula, result, context: 'log' in formula",
  "link" : "https://www.youtube.com/watch?v=VRzH4xB0GdM",
  "title": "Log Tables",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_real(result) and result < 1e7 and (is_prime(result) or result == 492113)",
  "link" : "https://www.youtube.com/watch?v=8UqCyepX3AI",
  "title": "WARNING: Contains Numbers",
  "source":"Numberphile",
  "note" : "prime number list needs to include 6-digit primes"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 0 <= result <= 9",
  "link" : "https://www.youtube.com/watch?v=kCSzjExvbTQ",
  "title": "Phone Buttons",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 0 <= result <= 7",
  "link" : "https://www.youtube.com/watch?v=N7BABxMlOs0",
  "title": "Can Fish Count?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: (is_int(result) and (500000 <= result or result == 14)) or is_close(result, (math.e, math.pi))",
  "link" : "https://www.youtube.com/watch?v=xEpLW_I21jY",
  "title": "Brady just talks about whatever",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=l8ezziaEeNE",
  "title": "Primes are like Weeds (PNT)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 1",
  "link" : "https://www.youtube.com/watch?v=l8ezziaEeNE",
  "title": "Primes are like Weeds (PNT)",
  "source":"Numberphile",
  "msg" : ["lambda f, r, c: 'The number of primes less than %s is approximately %s' % (format_numbers.to_pretty_x10(r), str(r / math.log(r)) if r / math.log(r) < 10000 else format_numbers.to_pretty_x10(r / math.log(r), 1))",
           "lambda f, r, c: 'The %s prime number is approximately %s' % (format_numbers.to_ordinal(r), format_numbers.to_pretty_x10(math.floor(r * math.log(r))))",
           "lambda f, r, c: 'There is a prime between %s and %s' % (format_numbers.to_pretty_x10(r), format_numbers.to_pretty_x10(math.ceil(2*r if r < 100 else 1.2*r)))"
           ]
 },
 {"test" : "lambda formula, result, context: is_irrational(result) or result == 0",
  "link" : "https://www.youtube.com/watch?v=aIggWlKr41w",
  "title": "Point about Points",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: any(str(i)*2 in str(result) for i in range(0, 10)) or (is_rational(result) and 1100 <= result <= 9999) or context['result'][-3:] == [1, 2, 3] or result == 1",
  "link" : "https://www.youtube.com/watch?v=YBbBbY4qvv4",
  "title": "British Numbers confuse Americans",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, 1.30637788386308069, 1e-17) or result in {2, 11, 1361, 2521008887, 16022236204009818131831320183, 4113101149215104800030529537915953170486139623539759933135949994882770404074832568499}",
  "link" : "https://www.youtube.com/watch?v=6ltrPVPEwfo",
  "title": "Awesome Prime Number Constant",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Mills%27_constant",
  "oeis" : ["https://oeis.org/A051021", "https://oeis.org/A051254"]
 },
 {"test" : "lambda formula, result, context: is_close(result, (2.685452001065306445309714835481795693820, ), 1e-11) or result in {1093, 3511} or is_subsequence_of(context['result'][-3:], (1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18)) or is_subsequence_of(context['result'][-3:], (0, 1, 5, 27, 194, 1865, 22875, 342391, 6053444, 123456789, 2853116705, 73686780563, 2103299351334, 65751519677857, 2234152501943159, 81985529216486895, 3231407272993502984, 136146740744970718253, 6106233505124424657789, 290464265927977839335179)) or is_subsequence_of(context['result'][-3:], (7, )*3) or is_subsequence_of(context['result'][-3:], (11, 67, 2, 4769, 67)) or is_subsequence_of(context['result'][-3:], (11, 67, 2, 4769, 67))",
  "link" : "https://www.youtube.com/watch?v=VDD6FDhKCYA",
  "title": "Six Sequences",
  "source":"Numberphile",
  "wiki" : ["https://en.wikipedia.org/wiki/Khinchin%27s_constant", "https://en.wikipedia.org/wiki/Wieferich_prime", "https://en.wikipedia.org/wiki/Golomb_sequence"],
  "oeis" : ["https://oeis.org/A002210", "https://oeis.org/A001220", "https://oeis.org/A001462", "http://oeis.org/A023811", "http://oeis.org/A010727", "http://oeis.org/A058883"]
 },
 {"test" : "lambda formula, result, context: result == math.inf",
  "link" : "https://www.youtube.com/watch?v=dDl7g_2x74Q",
  "title": "Infinity Paradoxes",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 41",
  "link" : "https://www.youtube.com/watch?v=3K-12i0jclM",
  "title": "41 and more Ulam's Spiral",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_prime(result) or result in (3399714628553118047, 33251810980696878103150085257129508857312847751498190349983874538507313) or (is_real(result) and result > 0 and result**.5 % 1 == 0)",
  "link" : "https://www.youtube.com/watch?v=iFuR97YcSLM",
  "title": "Prime Spirals",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (17, 13)",
  "link" : "https://www.youtube.com/watch?v=j7jfHM-mMC4",
  "title": "Cicada 17",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (0, 1, 0.5)",
  "link" : "https://www.youtube.com/watch?v=PCu_BNNI5x4",
  "title": "One minus one plus one minus one",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_transcendental(result)",
  "link" : "https://www.youtube.com/watch?v=seUU2bZtfgM",
  "title": "Transcendental Numbers",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: 'factorial' in formula or 'gamma' in formula",
  "link" : "https://www.youtube.com/watch?v=Mfk_L4Nx2ZI",
  "title": "Zero Factorial",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], FIBONACCI_NUMBERS) or is_close(result, math.pi, 1e-5)",
  "link" : "https://www.youtube.com/watch?v=acTrvMlpuxA",
  "title": "Mathematical Music",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: (is_int(result) and (0 <= result <= 9 or result in (79, 854685254, 27))) or is_close(result, math.pi, 1e-21)",
  "link" : "https://www.youtube.com/watch?v=u17MdWjGA5I",
  "title": "What colour is 27?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (23483, 9999)",
  "link" : "https://www.youtube.com/watch?v=nd_Z_jZdzP4",
  "title": "Number Trick",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: (len(context['result']) >= 2 and is_prime(result) and is_prime(context['result'][-2]) and result-context['result'][-2] % 2 == 0) or result == 7e7 or is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=D4_sNKoO-RA",
  "title": "Gaps between Primes (extra footage)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: (len(context['result']) >= 2 and is_prime(result) and is_prime(context['result'][-2]) and result-context['result'][-2] % 2 == 0) or result == 7e7 or is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=vkMXdShDdtY",
  "title": "Gaps between Primes",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (1e100, 3e41)",
  "link" : "https://www.youtube.com/watch?v=5JOAoiX1LHA",
  "title": "Googol Song",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (381654729, 10123457689, 362880, 3265920) or (is_int(result) and len(str(abs(int(result)))) == 9 and all(str(i) in str(result) for i in range(1, 10))) or (is_int(result) and len(str(abs(int(result)))) == 10 and all(str(i) in str(result) for i in range(0, 10)))",
  "link" : "https://www.youtube.com/watch?v=gaVMrqzb91w",
  "title": "Why 381,654,729 is awesome",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (10, 2, 3, 15, 25)",
  "link" : "https://www.youtube.com/watch?v=Fmb3TCvlETk",
  "title": "Base Number Jokes Explained",
  "source":"Numberphile",
  "note" : "different bases"
 },
 {"test" : "lambda formula, result, context: (len(context['result']) > 1 and not any(is_error(r) for r in context['result'][-2:]) and result // context['result'][-2] > 10) or result in {2, 789, 6, 7, 0, 8} or re.search(r'[^*]\\*[^*]', formula)",
  "link" : "https://www.youtube.com/watch?v=JJQWtGm3eIs",
  "title": "Math Jokes Explained",
  "source":"Numberphile",
  "note" : "cross multiplication"
 },
 {"test" : "lambda formula, result, context: result in (1, 108, 261, 8848)",
  "link" : "https://www.youtube.com/watch?v=XvDC-0aNw2k",
  "title": "Numberphile in Nepal",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (ord(c) for c in 'NUMBERPHILE') or result == 94699040255592155765623877",
  "link" : "https://www.youtube.com/watch?v=wo19Y4tw0l8",
  "title": "Illegal Numbers",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == math.inf or is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=ctC33JAV4FI",
  "title": "Infinite Primes",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == random.random() or '%' in formula",
  "link" : "https://www.youtube.com/watch?v=SxP30euw3-0",
  "title": "Random Numbers",
  "source":"Numberphile",
  "note" : "randomness"
 },
 {"test" : "lambda formula, result, context: result == random.gauss(216, 7) or result == 216",
  "link" : "https://www.youtube.com/watch?v=noDSyLzVz2g",
  "title": "Random Numbers (the next bit)",
  "source":"Numberphile",
  "note" : "normal randomness -- what's the stdev in the distribution?"
 },
 {"test" : "lambda formula, result, context: result == math.inf or (is_real(result) and -1 < result < 1)",
  "link" : "https://www.youtube.com/watch?v=u7Z9UnWOJNY",
  "title": "Zeno's Paradox",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in FIBONACCI_NUMBERS[1:12]",
  "link" : "https://www.youtube.com/watch?v=e4sF_Z5oJek",
  "title": "Fibonacci Tartan and Bagpipes",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: (len(context['result']) >= 3 and context['result'][-3] in ([25, 0, 25], [50, 25, 50])) or result in (8000, 162, 20) or is_close(result, (math.pi, math.e), 1e-8)",
  "link" : "https://www.youtube.com/watch?v=Waw11zhaKSk",
  "title": "Safe Cracking with Feynman",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, math.pi, 1e-9) or is_transcendental(result)",
  "link" : "https://www.youtube.com/watch?v=CMP9a2J4Bqw",
  "title": "Squaring the Circle",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {1800, 900, 2, 3, 0, 5, 62}",
  "link" : "https://www.youtube.com/watch?v=GyN-qpVfOWA",
  "title": "Statistics on Match Day",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {70, 80, 90} or any('60+'+str(i) in formula for i in (10, 19)) or '4*20' in formula",
  "link" : "https://www.youtube.com/watch?v=WM1FFhaWj9w",
  "title": "Problems with French Numbers",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {20, 19, 18, 16, 14, 12, 10, 10/20, 12/20, 14/20, 16/20, 18/20, 19/20} or any('60+'+str(i) in formula for i in (10, 19)) or '4*20' in formula",
  "link" : "https://www.youtube.com/watch?v=QzrRkhU248A",
  "title": "19 out of 20",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, math.pi, 1e-1)",
  "link" : "https://www.youtube.com/watch?v=bFNjA9LOPsg",
  "title": "How Pi was nearly changed to 3.2",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, math.pi, 0.0033) or is_close(result, (264+2/3, 84+1/3))",
  "link" : "https://www.youtube.com/watch?v=x4kyFKyCMv0",
  "title": "Pi with Pies (director's slice)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, math.pi, 0.0033) or is_close(result, (264+2/3, 84+1/3))",
  "link" : "https://www.youtube.com/watch?v=ZNiRzZ66YN0",
  "title": "Calculating Pi with Real Pies",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 10",
  "link" : "https://www.youtube.com/watch?v=iW_LkYiuTKE",
  "title": "The problem in Good Will Hunting",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and (0 <= result <= 10 or result == 20)",
  "link" : "https://www.youtube.com/watch?v=dNy23tJMTzQ",
  "title": "Synesthesia",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 39 or is_close(result, math.pi, 1e-38) or is_close(result, (8.8e26, 2.5e-11, 2.5e-12))",
  "link" : "https://www.youtube.com/watch?v=FpyrF_Ci2TQ",
  "title": "Pi and the size of the Universe",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (155, math.inf, 284, 220, 1, 12) or is_close(result, 2*math.pi) or (is_int(result) and result % 2 == 0)",
  "link" : "https://www.youtube.com/watch?v=8IOaoK2MMoI",
  "title": "Meet James Grime",
  "source":"Numberphile",
  "note" : "base 12 -- that's where the 12 came from"
 },
 {"test" : "lambda formula, result, context: is_real(result) and result > 0 and result < math.inf",
  "link" : "https://www.youtube.com/watch?v=aOJOfh2_4PE",
  "title": "Zequals and Estimation",
  "source":"Numberphile",
  "msg" : "lambda f, r, c: '%s zequals %s' % (format_numbers.to_pretty_x10(r), format_numbers.to_pretty_x10(round(r, -int(math.floor(math.log10(abs(r)))))))"
 },
 {"test" : "lambda formula, result, context: result in {318304, 6433, 4, 115, 54, 12237, 118, 366, 10318, 9, 62.3, 20, 5.6, 47.57, 76, 118, 136, 4611, 17, 17878, 16, 1954371119, 19.7, 47.2, 13.1, 59, 4, 154, 287890550, 1196, 16, 17676, 40997, 40998, 16, 1, 104, 108, 23}",
  "link" : "https://www.youtube.com/watch?v=YJuHC7xXsGA",
  "title": "Anatomy of a Goal",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {14, 16, 11, 8, 2.5, 0}",
  "link" : "https://www.youtube.com/watch?v=a9P9Ej1b31s",
  "title": "Quick chat with Brady",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in (57885161, 17425170, 5, 1)",
  "link" : "https://www.youtube.com/watch?v=QSEKzFGpCQs",
  "title": "New Largest Known Prime Number",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 45 or is_close(result, 2**0.5)",
  "link" : "https://www.youtube.com/watch?v=wCyC-K_PnRY",
  "title": "Dragon Curve",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {6041, 5286, 7, 3, 42, 8, 13, GRAHAMS_NUMBER, 16, 4617, 266, GOLDEN_RATIO, math.e, 2*math.pi, 42, 73, 420, 1337, 9001}",
  "link" : "https://www.youtube.com/watch?v=-rwqnVsGFTU",
  "title": "The Most Favourite Number",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 2147483647",
  "link" : "https://www.youtube.com/watch?v=QJQ691PTKsA",
  "title": "End of Time (Unix)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: False",
  "link" : "https://www.youtube.com/watch?v=VbtNy54ya9A",
  "title": "Brady's Videos and Benford's Law",
  "source":"Numberphile",
  "note" : "compare Benford's Curve to curve based on context['result'] (once there are enough of them) -- are they statistically the same?"
 },
 {"test" : "lambda formula, result, context: result in {30.1, 17.6, 12.5, 9.7, 7.9, 6.7, 5.8, 5.1, 4.6}",
  "link" : "https://www.youtube.com/watch?v=XXjlR2OK1kM",
  "title": "Number 1 and Benford's Law",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {60, 17576, 150738274937250, 158962555217826360000}",
  "link" : "https://www.youtube.com/watch?v=G2_Q9FoD-oQ",
  "title": "158,962,555,217,826,360,000 (Enigma Machine)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and sum([result // 10**i % 10 for i in range(math.ceil(math.log(result, 10)))]) == sum(sum([f // 10**i % 10 for i in range(math.ceil(math.log(f, 10)))]) for f in factors(result, FACTORS_PRIME))",
  "link" : "https://www.youtube.com/watch?v=mlqAvhjxAjo",
  "title": "4937775",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A006753",
  "wiki" : "https://en.wikipedia.org/wiki/Smith_number"
 },
 {"test" : "lambda formula, result, context: (is_error(result) and result.msg == 'divide by zero') or result in {0.99999999999, 496, 58008, 12}",
  "link" : "https://www.youtube.com/watch?v=6_j2X6fgkaA",
  "title": "Calculator Unboxing #8 (Printing Digits)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {4, 8, 550, 890, 10, 13}",
  "link" : "https://www.youtube.com/watch?v=uak-wvXJAvE",
  "title": "Kids get their money",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 12 or (is_real(result) and any(result % b == 0 for b in (2, 3, 4, 6, 12)))",
  "link" : "https://www.youtube.com/watch?v=U6xJfP7-HCc",
  "title": "Base 12",
  "source":"Numberphile",
  "note" : "base 12"
 },
 {"test" : "lambda formula, result, context: result in {2048, 65537} or is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=M7kEpw1tn50",
  "title": "Encryption and HUGE numbers",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 1 <= result <= 25",
  "link" : "https://www.youtube.com/watch?v=VpBmt11czaI",
  "title": "Advent Calendar",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 0",
  "link" : "https://www.youtube.com/watch?v=8t1TC-5OLdM",
  "title": "Is Zero Even?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 1",
  "link" : "https://www.youtube.com/watch?v=IQofiPqhJ_s",
  "title": "1 and Prime Numbers",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 27",
  "link" : "https://www.youtube.com/watch?v=l7lP9y7Bb5g",
  "title": "Beautiful Card Trick",
  "source":"Numberphile",
  "note" : "base"
 },
 {"test" : "lambda formula, result, context: result in {881, 2e107, 107, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 32, 16, 12, 14, 25, 16, 9, 28, 18, 25}",
  "link" : "https://www.youtube.com/watch?v=xYAU75IS40A",
  "title": "Spaghetti Numbers",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {214, 400, 118}",
  "link" : "https://www.youtube.com/watch?v=Cn3ogzLzxuM",
  "title": "400 and Gamebooks",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, (GOLDEN_RATIO, 2*math.pi))",
  "link" : "https://www.youtube.com/watch?v=aiibxmqXV9M",
  "title": "Tau of Phi",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {14, 19, 28, 47, 61, 75, 197, 742, 1104, 1537, 2208, 2580, 3684, 4788, 7385, 7647, 7909, 31331, 34285, 34348, 55604, 62662, 86935, 93993, 120284, 129106, 147640, 156146, 174680, 183186, 298320, 355419, 694280, 925993, 1084051, 7913837, 11436171, 33445755, 44121607}",
  "link" : "https://www.youtube.com/watch?v=uuMwz47LV_w",
  "title": "Keith Numbers",
  "source":"Numberphile",
  "note" : "could write algorithm to determine is Keith number; there are also other numbers but can't find good list of them",
  "oeis" : "http://oeis.org/A007629",
  "wiki" : "http://en.wikipedia.org/wiki/Keith_number"
 },
 {"test" : "lambda formula, result, context: is_close(result, 2*math.pi)",
  "link" : "https://www.youtube.com/watch?v=83ofi_L6eAo",
  "title": "Tau replaces Pi",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 5",
  "link" : "https://www.youtube.com/watch?v=gVzu1_12FUc",
  "title": "5 Platonic Solids",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {I, 2, 17, 13, 7, 27, 21, 1024, 16, 37, 1729, 0}",
  "link" : "https://www.youtube.com/watch?v=ygqIfLHGTu4",
  "title": "Favourite Numbers",
  "source":"Numberphile",
  "note" : "includes j and *, which are weird numbers"
 },
 {"init": "def int_to_digits(result, as_type=int):\n    if as_type == int:\n        return [result // 10**i % 10 for i in range(math.ceil(math.log(result, 10)))]\n    else:\n        return list(str(result))\n\ndef vampire(result=1260):\n    digits = int_to_digits(result, str)\n    result_size = len(digits)\n    partition_template = [1]*(result_size//2) + [0]*(result_size//2)\n    partitions = set([v for v in itertools.permutations(partition_template)])\n    for p in partitions:\n        f1 = int(''.join(itertools.compress(digits, p)))\n        f2 = int(''.join(itertools.compress(digits, [-1*v+1 for v in p])))\n        print(f1, '*', f2, '=', f1*f2, '?=', result)\n        if f1*f2 == result:\n            return True\n    return False\n",
  "test" : "lambda formula, result, context: is_int(result) and len(str(int(result))) % 2 == 0 and result in {1260, 1395, 1435, 1530, 1827, 2187, 6880, 102510, 104260, 105210, 105264, 105750, 108135, 110758, 115672, 116725, 117067, 118440, 120600, 123354, 124483, 125248, 125433, 125460, 125500, 126027, 126846, 129640} or formula in {'2*4', '4*2'}",
  "link" : "https://www.youtube.com/watch?v=3ZMnVd4ivKQ",
  "title": "Vampire Numbers",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Vampire_number",
  "oeis" : "https://oeis.org/A014575",
  "note" : "functions don't exist and vampire function not complete"
 },
 {"test" : "lambda formula, result, context: is_close(result, 6.022140857e23, 1e14)",
  "link" : "https://www.youtube.com/watch?v=2dzS_LXvYA0",
  "title": "Avogadro's Number (Mole)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: (is_error(result) and result.msg == 'divide by zero') or '0**0' in formula",
  "link" : "https://www.youtube.com/watch?v=BRRolKTlF6Q",
  "title": "Problems with Zero",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {4, 382}",
  "link" : "https://www.youtube.com/watch?v=fwD98HiQSJc",
  "title": "ViHart on Tetrahedral Dice",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 22, 23, 25, 28, 31, 34, 37, 43}",
  "link" : "https://www.youtube.com/watch?v=vNTSugyS038",
  "title": "How to order 43 Chicken McNuggets",
  "source":"Numberphile",
  "oeis" : "https://oeis.org/A065003",
  "wiki" : "https://en.wikipedia.org/wiki/Coin_problem#McNugget_numbers"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and (math.log(result, 2) % 1 == 0 or result in FIBONACCI_NUMBERS)",
  "link" : "https://www.youtube.com/watch?v=kQZmZRE0cQY",
  "title": "Brown's Criterion",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: len(context['result']) >= 5 and all(context['result'][-1] == context['result'][i] for i in range(-5, -1))",
  "link" : "https://www.youtube.com/watch?v=4sUKyPYNEVA",
  "title": "Underwater Yahtzee",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 20",
  "link" : "https://www.youtube.com/watch?v=BTyzE-NDga8",
  "title": "Superflip and Rubik's Cube",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result <= 20",
  "link" : "https://www.youtube.com/watch?v=yF2J39Xny4Q",
  "title": "God's Number and Rubik's Cube",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 43252003274489856000",
  "link" : "https://www.youtube.com/watch?v=QV9k6dRQQe4",
  "title": "43,252,003,274,489,856,000",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {5, 4, 11, 5, 71, 7}",
  "link" : "https://www.youtube.com/watch?v=-Djj6pfR9KU",
  "title": "43,252,003,274,489,856,000",
  "source":"Numberphile",
  "note" : "could do something fancier"
 },
 {"test" : "lambda formula, result, context: len(context['result']) >= 5 and all(context['result'][-1] == context['result'][i] for i in range(-5, -1))",
  "link" : "https://www.youtube.com/watch?v=EDauz38xV9w",
  "title": "AMAZING Dice Rolls",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: any(d in str(result) for d in ('8', '6', '4'))",
  "link" : "https://www.youtube.com/watch?v=pT52hREAf18",
  "title": "Chinese Lucky Numbers",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {1, 12, 15, 3}",
  "link" : "https://www.youtube.com/watch?v=dHzUQnRjbuM",
  "title": "Numbery Card Trick",
  "source":"Numberphile",
  "weight":0.25
 },
 {"test" : "lambda formula, result, context: result in {27, 300, 6, 36, 9, 501, 147, 120, 24, 1, 1575, 649739, 1/649739, 128, 130, 2044}",
  "link" : "https://www.youtube.com/watch?v=fHhnh-1Obyc",
  "title": "Perfect Games",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 5050",
  "link" : "https://www.youtube.com/watch?v=Dd81F6-Ar_0",
  "title": "One to One Million",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: len(context['result']) >= 5 and all(context['result'][-1] == context['result'][i] for i in range(-5, -1))",
  "link" : "https://www.youtube.com/watch?v=dXGhzY2p2ug",
  "title": "One-Roll Yahtzee Fever",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {9.63, 100, 9.62999999999999422}",
  "link" : "https://www.youtube.com/watch?v=tflf05x-WVI",
  "title": "Did Usain Bolt REALLY run 100m in 9.63 seconds?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {1, 5, 23}",
  "link" : "https://www.youtube.com/watch?v=x6Ml4AEt0kk",
  "title": "Borromean Olympic Rings",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_complex(result)",
  "link" : "https://www.youtube.com/watch?v=M-yAgyrzGdo",
  "title": "Batman Equation",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: False",
  "link" : "https://www.youtube.com/watch?v=A25pxcYstHM",
  "title": "Problematic Sunflower",
  "source":"Numberphile",
  "note" : "need efficient way to determine whether most recent two results are consecutive numbers in Fibonacci sequence"
 },
 {"test" : "lambda formula, result, context: len(context['result']) >= 5 and all(context['result'][-1] == context['result'][i] for i in range(-5, -1))",
  "link" : "https://www.youtube.com/watch?v=rKI7JINZh5Q",
  "title": "More One-Roll Yahtzees",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: (len(context['result']) >= 5 and all(context['result'][-1] == context['result'][i] for i in range(-5, -1))) or result in {1296, 1/1296, 64, 37, 90, 2920, 3, 627}",
  "link" : "https://www.youtube.com/watch?v=fiTwar7mFws",
  "title": "1,296 and Yahtzee",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 4",
  "link" : "https://www.youtube.com/watch?v=p_Hqdqe84Uc",
  "title": "Dyscalculia",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 37",
  "link" : "https://www.youtube.com/watch?v=EJRXWNWJOrQ",
  "title": "37",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in context['result'][:-1] and formula in context['formula'][:-1]",
  "link" : "https://www.youtube.com/watch?v=1GCf29FPM4k",
  "title": "The LONGEST time",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, GOLDEN_RATIO)",
  "link" : "https://www.youtube.com/watch?v=nBgQPSUTWVM",
  "title": "Golden Ratio Song",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {27, 6, 13598, 1, 16470, 44899}",
  "link" : "https://www.youtube.com/watch?v=euAHY9hqRN4",
  "title": "27 the Favourite Number",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, GOLDEN_RATIO)",
  "link" : "https://www.youtube.com/watch?v=mqK63v2Jzks",
  "title": "Golden Ratio - Making a Math Metal Anthem",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == math.inf",
  "link" : "https://www.youtube.com/watch?v=elvOZm0d4H0",
  "title": "Infinity is bigger than you think",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 301",
  "link" : "https://www.youtube.com/watch?v=oIkhgagvrjI",
  "title": "Why do YouTube views freeze at 301?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {14, 18}",
  "link" : "https://www.youtube.com/watch?v=MmhNk-zRJcU",
  "title": "14 and Shakespeare the Numbers Man",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {4294967296, 18446744073709551616}",
  "link" : "https://www.youtube.com/watch?v=8d49sEAU5Ws",
  "title": "The Internet is FULL",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {12, 20, 32}",
  "link" : "https://www.youtube.com/watch?v=4mEk7d8oRho",
  "title": "32 and Truncated Icosahedron",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {5, 13, 17, 29, 37, 41, 53, 61, 73, 89, 97, 101, 109, 113, 137, 149, 157, 173, 181, 193, 197, 229, 233, 241, 257, 269, 277, 281, 293, 313, 317, 337, 349, 353, 373, 389, 397, 401, 409, 421, 433, 449, 457, 461, 509, 521, 541, 557, 569, 577, 593, 601, 613, 617}",
  "link" : "https://www.youtube.com/watch?v=yu_aqA7mw7E",
  "title": "5, 13 and 137 are Pythagorean Primes",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A002144"
 },
 {"test" : "lambda formula, result, context: result in {3628800, 6}",
  "link" : "https://www.youtube.com/watch?v=kUBIJdGsD1A",
  "title": "10!",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {1e9, 1e12}",
  "link" : "https://www.youtube.com/watch?v=C-52AI_ojyQ",
  "title": "How big is a billion?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_number(result)",
  "link" : "https://www.youtube.com/watch?v=1EGDCh75SpQ",
  "title": "Do numbers EXIST?",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 60",
  "link" : "https://www.youtube.com/watch?v=R9m2jck1f90",
  "title": "60",
  "source":"Numberphile",
  "note" : "base 60"
 },
 {"test" : "lambda formula, result, context: result in {1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63, 67, 69, 73, 75, 79, 87, 93, 99, 105, 111, 115, 127, 129, 133, 135, 141, 151, 159, 163, 169, 171, 189, 193, 195, 201, 205, 211, 219, 223, 231, 235, 237, 241, 259, 261, 267, 273, 283, 285, 289, 297, 303, 307, 319, 321, 327, 331, 339, 349, 357, 361, 367, 385, 391, 393, 399, 409, 415, 421, 427, 429, 433, 451, 463, 475, 477, 483, 487, 489, 495, 511, 517, 519, 529, 535, 537, 541, 553, 559, 577, 579, 583, 591, 601, 613, 615, 619, 621, 631, 639, 643, 645, 651, 655, 673, 679, 685, 693, 699, 717, 723, 727, 729, 735, 739, 741, 745, 769, 777, 781, 787, 801, 805, 819, 823, 831, 841, 855, 867, 873, 883, 885, 895, 897, 903, 925, 927, 931, 933, 937, 957, 961, 975, 979, 981, 991, 993, 997}",
  "link" : "https://www.youtube.com/watch?v=RxxDD2LWAyY",
  "title": "What is a lucky number?",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A000959",
  "wiki" : "http://en.wikipedia.org/wiki/Lucky_number"
 },
 {"test" : "lambda formula, result, context: result in {5, 7, 11, 13, 17, 23, 31, 37, 41, 47, 53, 61, 67, 73, 83, 97, 101, 103, 107, 131, 151, 157, 167, 173, 191, 193, 223, 227, 233, 251, 257, 263, 271, 277, 307, 311, 331, 347, 353, 367, 373, 383, 433, 443, 457, 461, 503, 541, 557, 563, 571, 587, 593, 601, 607, 613, 641, 647}",
  "link" : "https://www.youtube.com/watch?v=WJ12DYBuazY",
  "title": "Sexy Primes",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A023201"
 },
 {"test" : "lambda formula, result, context: result in {8848, 200000, 1850, 200, 29000, 29002, 8840, 8850, 8844, 6268}",
  "link" : "https://www.youtube.com/watch?v=CMUI6m8ZMwg",
  "title": "8848",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {666, 616} or result in {0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431}",
  "link" : "https://www.youtube.com/watch?v=UkZqFtYtqaI",
  "title": "666",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A000217",
  "wiki" : "https://en.wikipedia.org/wiki/Triangular_number"
 },
 {"test" : "lambda formula, result, context: result in FIBONACCI_NUMBERS",
  "link" : "https://www.youtube.com/watch?v=DRjFV_DETKQ",
  "title": "Sunflowers and Fibonacci",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Fibonacci_number",
  "oeis" : "http://oeis.org/A000045"
 },
 {"test" : "lambda formula, result, context: result == 3",
  "link" : "https://www.youtube.com/watch?v=k8Rxep2Mkp8",
  "title": "A Hole in a Hole in a Hole",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {GRAHAMS_NUMBER, 7, 11, 3, 64}",
  "link" : "https://www.youtube.com/watch?v=XTeJ64KD5cg",
  "title": "Graham's Number",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Graham%27s_number"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 2 and '3' in str(result)",
  "link" : "https://www.youtube.com/watch?v=UfEiJJGv4CE",
  "title": "3 is everywhere",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 '3' in str(result)",
  "link" : "https://www.youtube.com/watch?v=UfEiJJGv4CE",
  "title": "3 is everywhere",
  "source":"Numberphile",
  "msg" : "lambda f, result, c: 'There\\'s a %0.2f%% chance that a %d-digit number has a 3 in it' % ((1-math.pow(0.9, math.ceil(math.log(result, 10))+1))*100, math.ceil(math.log(result, 10)))"
 },
 {"test" : "lambda formula, result, context: result in {14, 19, 31, 33, 34, 45, 49, 6/49, 5/48, 4/47, 3/46, 2/45, 1/44, 43/49, 42/48, 41/47, 40/46, 39/45, 38/44} or is_close(result, (720/10068347520, 4389446880/10068347520))",
  "link" : "https://www.youtube.com/watch?v=U7f8j3mVMbc",
  "title": "13,983,816 and the Lottery",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 6000000 or is_prime(result)",
  "link" : "https://www.youtube.com/watch?v=6R7cFk0Kihw",
  "title": "6,000,000 and Abel Prize",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {3, 4, 5, 6}",
  "link" : "https://www.youtube.com/watch?v=QTrM-UVcgBY",
  "title": "5 and Penrose Tiling",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, math.pi)",
  "link" : "https://www.youtube.com/watch?v=wPn4tgmU8ek",
  "title": "Sounds of Pi",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, (math.pi, 163/52))",
  "link" : "https://www.youtube.com/watch?v=sJVivjuMfWA",
  "title": "Pi and Buffon's Matches",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, math.pi)",
  "link" : "https://www.youtube.com/watch?v=abv4Fz7oNr0",
  "title": "Pi and Bouncing Balls",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_real(result) and result > 0 and math.log(result/16, 100) % 1 < 0.001",
  "link" : "https://www.youtube.com/watch?v=abv4Fz7oNr0",
  "title": "Pi and Bouncing Balls",
  "source":"Numberphile",
  "msg" : "lambda f, result, c: 'With two balls, whose masses are in the ratio %.2f:1, you can generate the first %d digits of pi!' % (result, 1+round(math.log(result/16, 100)))"
 },
 {"test" : "lambda formula, result, context: is_real(result) and 3+10/71 < result < 3+10/70",
  "link" : "https://www.youtube.com/watch?v=yJ-HwrOpIps",
  "title": "Pi",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 42 or result in {0, 2, 6, 12, 20, 30, 42, 56, 72, 90, 110, 132, 156, 182, 210, 240, 272, 306, 342, 380, 420, 462, 506, 552, 600, 650, 702, 756, 812, 870, 930, 992, 1056, 1122, 1190, 1260, 1332, 1406, 1482, 1560, 1640, 1722, 1806, 1892, 1980, 2070, 2162, 2256, 2352, 2450, 2550} or result in {2, 6, 42, 1806, 47058, 2214502422, 52495396602, 8490421583559688410706771261086} or result in {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 24, 27, 30, 36, 40, 42, 45, 48, 50, 54, 60, 63, 70, 72, 80, 81, 84, 90, 100, 102, 108, 110, 111, 112, 114, 117, 120, 126, 132, 133, 135, 140, 144, 150, 152, 153, 156, 162, 171, 180, 190, 192, 195, 198, 200, 201, 204}",
  "link" : "https://www.youtube.com/watch?v=D6tINlNluuY",
  "title": "42 and Douglas Adams",
  "source":"Numberphile",
  "oeis" : ["http://oeis.org/A002378", "http://oeis.org/A054377", "http://oeis.org/A005349"]
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and is_int(result**0.5) and all('9'==d for d in str(int(result**0.5)))",
  "link" : "https://www.youtube.com/watch?v=daro6K6mym8",
  "title": "998,001 and its Mysterious Recurring Decimals",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_complex(result) or result in {1, 2, 3, 7, 11, 19, 43, 67, 163} or result in {-1, -2, -3, -7, -11, -19, -43, -67, -163} or result in (v**0.5 for v in (-1, -2, -3, -7, -11, -19, -43, -67, -163)) or is_close(result, (math.exp(math.sqrt(v)*math.pi) for v in (1, 2, 3, 7, 11, 19, 43, 67, 163)))",
  "link" : "https://www.youtube.com/watch?v=DRxAVA6gYMM",
  "title": "163 and Ramanujan Constant",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A003173"
 },
 {"test" : "lambda formula, result, context: result in {29, 2455987, 2440423.62, 2419507.74} or (is_int(result) and result % 4 == 0 and result % 100 != 0 and result % 400 == 0)",
  "link" : "https://www.youtube.com/watch?v=-O4mYiP2zPQ",
  "title": "29 and Leap Years",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {83, 38, 73, 58, 89, 145, 42, 20, 4, 16, 37}",
  "link" : "https://www.youtube.com/watch?v=_DpzAvb3Vk4",
  "title": "145 and the Melancoil",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {1729, 4104, 13832, 20683, 32832, 39312, 40033, 46683, 64232, 65728, 110656, 110808, 134379, 149389, 165464, 171288, 195841, 216027, 216125, 262656, 314496, 320264, 327763, 373464, 402597, 439101, 443889, 513000, 513856, 515375, 525824, 558441, 593047, 684019, 704977}",
  "link" : "https://www.youtube.com/watch?v=LzjaDKVC4iY",
  "title": "1729 and Taxi Cabs",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, {1e100, 5e12, 1e80, 1e90, 1e183, 1e26, 1e78}, method='pct')",
  "link" : "https://www.youtube.com/watch?v=8GEebx72-qs",
  "title": "Googol and Googolplex",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {25, 18, 51, 82, 81, 52, 15, 28, 12, 21, 88, 55, 58, 85, 22, 11, 176}",
  "link" : "https://www.youtube.com/watch?v=aTSYARnB-3Y",
  "title": "Special Magic Square",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {23, 253} or is_close(result, (0.493, 0.507), 1e-3)",
  "link" : "https://www.youtube.com/watch?v=a2ey9a70yY0",
  "title": "23 and Football Birthdays",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {1, 7, 10, 13, 19, 23, 28, 31, 32, 44, 49, 68, 70, 79, 82, 86, 91, 94, 97, 100, 103, 109, 129, 130, 133, 139, 167, 176, 188, 190, 192, 193, 203, 208, 219, 226, 230, 236, 239, 262, 263, 280, 291, 293, 301, 302, 310, 313, 319, 320, 326, 329, 331, 338}",
  "link" : "https://www.youtube.com/watch?v=kC6YObu61_w",
  "title": "7 and Happy Numbers",
  "source":"Numberphile",
  "oeis" : "http://oeis.org/A007770",
  "wiki" : "http://en.wikipedia.org/wiki/Happy_number"
 },
 {"test" : "lambda formula, result, context: result in {0.5, 14, 32766}",
  "link" : "https://www.youtube.com/watch?v=bFfSfzjhfC8",
  "title": "14 Super Bowl Coin Tosses",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0",
  "link" : "https://www.youtube.com/watch?v=bFfSfzjhfC8",
  "title": "14 Super Bowl Coin Tosses",
  "source":"Numberphile",
  "msg" : "lambda f, result, c: 'To get %d wins in a row (at 50%% chance of a win), you need to try %s times on average.' % (int(result), format_numbers.to_pretty_x10(math.ceil(2**(result+1)-2)))"
 },
 {"test" : "lambda formula, result, context: result == 0.75",
  "link" : "https://www.youtube.com/watch?v=hLGDJFGAmic",
  "title": "3/4 and Kleiber's Law",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: is_close(result, 2**.5)",
  "link" : "https://www.youtube.com/watch?v=5sKah3pJnHI",
  "title": "Root 2",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 81, 6.7e21, 3.3e16, 5472730538}",
  "link" : "https://www.youtube.com/watch?v=MlyTq-xVkQE",
  "title": "17 and Sudoku Clues",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {98, 99, 9998, 9999, 77, 9797, 997997, 764, 765, 5711, 5736, 76394, 2798254, 7639321, 8053139, 763932023, 76393202251, 7639320225003} or is_close(result, 3-5**.5)",
  "link" : "https://www.youtube.com/watch?v=hiOMtBrH8pc",
  "title": "98 and Grafting Numbers",
  "source":"Numberphile",
  "note" : "interesting patterns"
 },
 {"test" : "lambda formula, result, context: result in {15, 16, 255, 0xffffffff}",
  "link" : "https://www.youtube.com/watch?v=9xbJ3enqLnA",
  "title": "15 and Hexadecimal",
  "source":"Numberphile",
  "note" : "base 16"
 },
 {"test" : "lambda formula, result, context: result in {3435, 1}",
  "link" : "https://www.youtube.com/watch?v=mhJY74Bw8mw",
  "title": "3435",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Munchausen_number",
  "oeis" : "https://oeis.org/A046253"
 },
 {"test" : "lambda formula, result, context: result in {1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407, 1634, 8208, 9474, 54748, 92727, 93084, 548834, 1741725, 4210818, 9800817, 9926315, 24678050, 24678051, 88593477, 146511208, 472335975, 534494836, 912985153, 4679307774, 32164049650, 32164049651}",
  "link" : "https://www.youtube.com/watch?v=4aMtJ-V26Z4",
  "title": "153 and Narcissistic Numbers",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Narcissistic_number",
  "oeis" : "https://oeis.org/A005188"
 },
 {"test" : "lambda formula, result, context: result in {3, 7, 31, 127, 8191, 131071, 524287, 2147483647, 2305843009213693951, 618970019642690137449562111, 162259276829213363391578010288127, 170141183460469231731687303715884105727}",
  "link" : "https://www.youtube.com/watch?v=PLL0mo5rHhk",
  "title": "31 and Mersenne Primes",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Mersenne_prime",
  "oeis" : "https://oeis.org/A000668"
 },
 {"test" : "lambda formula, result, context: result in {15}",
  "link" : "https://www.youtube.com/watch?v=Oev332D0K0I",
  "title": "15 bumfit",
  "source":"Numberphile",
  "note" : "base 20"
 },
 {"test" : "lambda formula, result, context: len(context['result']) > 1 and is_int(result) and result > 0 and is_int(context['result'][-2]) and context['result'][-2] > 0 and sum(factors(result)) == context['result'][-2] and sum(factors(context['result'][-2])) == result",
  "link" : "https://www.youtube.com/watch?v=fUSZBVYZdKY",
  "title": "220 and 284 (Amicable Numbers)",
  "source":"Numberphile",
  "wiki" : "https://en.wikipedia.org/wiki/Amicable_numbers",
  "oeis" : "https://oeis.org/A259180"
 },
 {"test" : "lambda formula, result, context: result in {69, math.factorial(69)} or is_close(result, sys.float_info.max, method='pct')",
  "link" : "https://www.youtube.com/watch?v=kw6l_uTakRA",
  "title": "69!",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {6147}",
  "link" : "https://www.youtube.com/watch?v=d8TRcZklX_Q",
  "title": "6147",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {6, 28, 496, 8128, 33550336, 8589869056, 137438691328, 2305843008139952128, 2658455991569831744654692615953842176, 191561942608236107294793378084303638130997321548169216}",
  "link" : "https://www.youtube.com/watch?v=ZfKTD5lvToE",
  "title": "8128 and Perfect Numbers",
  "source":"Numberphile",
  "wiki" : "http://www.wikipedia.org/wiki/Perfect_number",
  "oeis" : "https://oeis.org/A000396"
 },
 {"test" : "lambda formula, result, context: result == 16",
  "link" : "https://www.youtube.com/watch?v=mLQNvuZH3GU",
  "title": "16",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 255",
  "link" : "https://www.youtube.com/watch?v=umYvFdU54Po",
  "title": "255 and Pac-Man",
  "source":"Numberphile",
  "note" : "base 2"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 0 <= result < 1e11 and sum([result//(10**(10-i-1)) % 10 * (10-i) for i in range(10)]) % 11",
  "link" : "https://www.youtube.com/watch?v=sPFWfAxIiwg",
  "title": "11.11.11",
  "source":"Numberphile",
  "msg" : "lambda f, result, c: 'The number %010d could be a valid ISBN-10 value.' % (result)"
 },
 {"test" : "lambda formula, result, context: result == 11",
  "link" : "https://www.youtube.com/watch?v=sPFWfAxIiwg",
  "title": "11.11.11",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result == 2.2e3",
  "link" : "https://www.youtube.com/watch?v=7zGwbiCKLHs",
  "title": "Sun Explosion compared to the Destruction of Planet Alderaan",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: is_close(result, 0.3, 1e-3)",
  "link" : "https://www.youtube.com/watch?v=T6A0v3xYl7k",
  "title": "In Defiance of Wadsworth's Constant",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and 0 <= result < 1e14 and 10 - ((sum([result//(10**(13-i-1)) % 10 for i in range(0, 12, 2)]) + 3*sum([result//(10**(13-i-1)) % 10 for i in range(1, 12, 2)])) % 10) == result % 10",
  "link" : "https://www.youtube.com/watch?v=RP8jepN3zMc",
  "title": "Matt Parker: Stand-up Maths Routine (about barcodes)",
  "source":"standupmaths",
  "msg" : "lambda f, result, c: 'The number %013d could be a valid barcode value.' % (result)"
 },
 {"test" : "lambda formula, result, context: result == 4",
  "link" : "https://www.youtube.com/watch?v=nv0Onj3wXCE",
  "title": "The Castle and the Princess Puzzle",
  "source":"standupmaths",
  "note" : "solution to puzzle may be incorrect"
 },
 {"test" : "lambda formula, result, context: result in {105, 12}",
  "link" : "https://www.youtube.com/watch?v=aPD_OkjnCqU",
  "title": "How to Cheat and Look Like You Can Solve the Rubik's Cube",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {584, 215.5, 224.70069, 365.25, 1/224.70069, 1/365.25, 1/224.70069 - 1/365.25, 1/(1/224.70069 - 1/365.25)} or is_close(result, 1/(1/224.70069 - 1/365.25))",
  "link" : "https://www.youtube.com/watch?v=Sdz0dRhsoLs",
  "title": "Transit of Venus - Why it comes in pairs every 100ish years",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {2, -80, 1, 0.5} or is_close(result, 23, 1)",
  "link" : "https://www.youtube.com/watch?v=ryFvH4Ejaxo",
  "title": "How to make Instant Icecream using a Fire Extinguisher",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result == 52 or is_close(result, (1/52, 35.7, 51/52))",
  "link" : "https://www.youtube.com/watch?v=ryFvH4Ejaxo",
  "title": "How to make Instant Icecream using a Fire Extinguisher",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {27, random.randrange(1, 28), 49, random.randrange(1, 50), 2, 3}",
  "link" : "https://www.youtube.com/watch?v=G_OuIVOGDr8",
  "title": "The 27 Card Trick",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: '+' in formula or result in {36, 2, 8, 10, 10000, 9, 3, 12} or (is_int(result) and 0 <= result <= 31) or is_error(result)",
  "link" : "https://www.youtube.com/watch?v=OpLU__bhu2w",
  "title": "The 10,000 Domino Computer",
  "source":"standupmaths",
  "note" : "base 2"
 },
 {"test" : "lambda formula, result, context: is_close(result, math.pi, 1e-2) or result in {54.2, 68.8}",
  "link" : "https://www.youtube.com/watch?v=Ngj0a57Rlb0",
  "title": "Calculating pi by weighing a circle",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: is_close(result, (math.pi/4, math.pi**2/6)) or result in {31.28} or is_close(result, math.pi, 1e-2)",
  "link" : "https://www.youtube.com/watch?v=qYAdXm69l8g",
  "title": "Calculating pi with a pendulum",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {1000000, 1/1000000, 2.68}",
  "link" : "https://www.youtube.com/watch?v=g7TGA-EzBHM",
  "title": "Matt Parker's Micro-Month: MARCH 2015",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: is_close(result, (985, 400, 389, 29.53059, 363396, 405504, 27.55455, 30, 5.1, 27.212221, 40.7, 223, 239, 242, 18+(11+8/24)/365.2425, 3.7), method='pct')",
  "link" : "https://www.youtube.com/watch?v=ieUvzy6rnnw",
  "title": "Solar Eclipse Maths and the Cosmic Coincidence of the Saros Cycle",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {0, 1, 3.58}",
  "link" : "https://www.youtube.com/watch?v=kdCJunw_Jgg",
  "title": "NAND Cat [original]",
  "source":"standupmaths",
  "note" : "base 2"
 },
 {"test" : "lambda formula, result, context: '^2' in formula",
  "link" : "https://www.youtube.com/watch?v=zXoJlRFbktw",
  "title": "Sydney: The Unsuccessful Hunt for Parabolas",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result == 1",
  "link" : "https://www.youtube.com/watch?v=rT1sIVqonE8",
  "title": "Matt meets Jordan Ellenberg: 0.999999... = ?",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {1, 0, -1, 1/2, math.inf, 2, math.e} or is_close(result, math.log(2), 1e-5)",
  "link" : "https://www.youtube.com/watch?v=qJiVhfR_XVE",
  "title": "Matt meets Jordan Ellenberg: BONUS FOOTAGE",
  "source":"standupmaths",
  "oeis" : "http://oeis.org/A002162"
 },
 {"test" : "lambda formula, result, context: result in {49, 59, math.inf} or is_close(result, (1/13983816, 1/45057474, 1/10.258, 1/40665099))",
  "link" : "https://www.youtube.com/watch?v=pOx_daJT_8c",
  "title": "How to get infinitely many lottery tickets",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {358, 210, 26} or '2^' in formula or result in (199 + i*210 for i in range(10)) or result in (43142746595714191 + i*5283234035979900 for i in range(26))",
  "link" : "https://www.youtube.com/watch?v=W1OkVkq2vFM",
  "title": "Killing Maths Mosquitoes with Atomic Proofs: roots of two, Fermat and prime numbers",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {1811, 4, 12, 5, 24, 224, 95, 243, 59201, 59049, 6, 33, 7, 45, 9, 65, 10, 71, 9.975, -26.5, 0.995} or formula in {'9.975*Ans-26.5', 'Ans/10+2.7'}",
  "link" : "https://www.youtube.com/watch?v=Quwvw0vYkRA",
  "title": "NYC: The Linear Equation of Broadway",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {59, 6, 45057474, 40665099, 33469099} or is_close(result, (2219e-11, 0.00000002988), 1e-4, method='pct') or is_close(result, (0.09748, 0.2572, 1.3462), 1e-3)",
  "link" : "https://www.youtube.com/watch?v=lP58mP8Wchc",
  "title": "Matt Explains: The Lottery [featuring: Choose Function, Infinite Geometric Series]",
  "source":"standupmaths",
  "note" : "choose function"
 },
 {"test" : "lambda formula, result, context: (is_error(result) and result.msg == 'divide by zero') or formula in {'2-3', 'Ans/0', '-1/Ans', '0^0', '25×37'} or result in {0.7734, 2, 30, 3000, 925, 954, 5678} or is_close(result, (2**0.5, math.pi, 2*math.pi))",
  "link" : "https://www.youtube.com/watch?v=YfIQ7ktFM1g",
  "title": "Sam's Home-made Disco Calculator",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {14, 70, 60, 620, 7200}",
  "link" : "https://www.youtube.com/watch?v=E5-pgBnGyzw",
  "title": "The Share the Power Puzzle",
  "source":"standupmaths",
  "note" : "potential for more"
 },
 {"test" : "lambda formula, result, context: is_subsequence_of(context['result'][-3:], (2, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 2, 0, 2, 1, 0, 2, 0, 1, 2, 1, 0, 1, 2, 0, 2, 1, 0, 1, 2, 1, 0, 2, 0, 1, 2, 1, 0)) or is_subsequence_of(context['result'][-3:], (0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1))",
  "link" : "https://www.youtube.com/watch?v=prh72BLNjIk",
  "title": "The Fairest Sharing Sequence Ever",
  "source":"standupmaths",
  "wiki" : "https://en.wikipedia.org/wiki/Thue%E2%80%93Morse_sequence",
  "oeis" : ["http://oeis.org/A036577", "http://oeis.org/A010060"],
  "note" : "base 2"
 },
 {"test" : "lambda formula, result, context: result in {5, 12}",
  "link" : "https://www.youtube.com/watch?v=oJ7uOj2LRso",
  "title": "There are SIX Platonic Solids",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result == 0",
  "link" : "https://www.youtube.com/watch?v=-EhaFDv-OvU",
  "title": "Doing Nothing on Platform Zero",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: len(context['result']) >= 5 and context['result'][-5:] == [1, 4, 6, 4, 1]",
  "link" : "https://www.youtube.com/watch?v=Pcgvv6T_bD8",
  "title": "Matt Explains: Binomial Coefficients [featuring: choose function, pascal's triangle]",
  "source":"standupmaths",
  "note" : "choose function"
 },
 {"test" : "lambda formula, result, context: result == 6",
  "link" : "https://www.youtube.com/watch?v=BIiEsIDenTk",
  "title": "How to Make a Paper Snowflake",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 0 <= result <= 255",
  "link" : "https://www.youtube.com/watch?v=UBX2QQHlQ_I",
  "title": "Stand-up comedy routine about Spreadsheets",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result == 6210001000",
  "link" : "https://www.youtube.com/watch?v=07PBcmGozDA",
  "title": "James Grime's Maths Puzzle: The self descriptive number",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: is_close(result, (0.7083, 0.001389), 1e-4, 'pct') or is_close(result, (2**.5, 0.02)) or result in {1, 234477, 42, 5004, 4}",
  "link" : "https://www.youtube.com/watch?v=SOgn6J12NWE",
  "title": "The A4 Paper Puzzle",
  "source":"standupmaths",
  "note" : "base 64 hash of perimeter from SHA-256"
 },
 {"test" : "lambda formula, result, context: result in {1, 5, 20, 10, 100, 50} or 'ln' in formula or is_close(result, (0.99742, 0.99486, 0.99747, 0.99812))",
  "link" : "https://www.youtube.com/watch?v=Me9fCKNvBBE",
  "title": "Australian Bank Notes are the Best in the World",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: (is_int(result) and (str(result).startswith('300376') or str(result).endswith('86436351'))) or result in {22338618, 2567, 74207281} or is_close(result, 800, 0.05, 'pct')",
  "link" : "https://www.youtube.com/watch?v=q5ozBnrd5Zc",
  "title": "New World-Record Largest Prime Ever Found!",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result == 12 or '%4' in formula",
  "link" : "https://www.youtube.com/watch?v=9KABcmczPdg",
  "title": "The Unbeatable Game from the 60s: Dr NIM",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result == 52",
  "link" : "https://www.youtube.com/watch?v=aNpGxZ_1KXU",
  "title": "Mind-boggling Card Trick (you can try at home)",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {52, 26}",
  "link" : "https://www.youtube.com/watch?v=V3uNDe_i_1Y",
  "title": "Mind-boggling Card Trick: REVEALED",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {1890, 68, 69}",
  "link" : "https://www.youtube.com/watch?v=qMP7_IQpSN0",
  "title": "Spinning Egg Trick (feat. Tippe Top)",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: False",
  "link" : "https://www.youtube.com/watch?v=hoh4TmPzu1w",
  "title": "There is only One True Parabola",
  "source":"standupmaths",
  "note" : "parabola"
 },
 {"test" : "lambda formula, result, context: is_close(result, (365+(5+(48+45.138/60)/60)/24, 365.2421897), 1e-8) or result in {46, 265.25, 4, 128, 1752, 3216, 625000, 53.5e12, 1.7, 1.7e-3, 52e-3, 2048} or is_close(result, 3372000, method='pct') or is_close(result, 365, 1)",
  "link" : "https://www.youtube.com/watch?v=qkt_wmRKYNQ",
  "title": "Leap Years: we can do better",
  "source":"standupmaths",
  "note" : "base 2"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and result % 4 == 0",
  "link" : "https://www.youtube.com/watch?v=qkt_wmRKYNQ",
  "title": "Leap Years: we can do better",
  "source":"standupmaths",
  "msg" : "lambda f, result, c: format_numbers.to_pretty_x10(int(result)) + ' would be a leap year in the Julian calendar'"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and result % 4 == 0 and result % 100 != 0 and result % 400 == 0",
  "link" : "https://www.youtube.com/watch?v=qkt_wmRKYNQ",
  "title": "Leap Years: we can do better",
  "source":"standupmaths",
  "msg" : "lambda f, result, c: format_numbers.to_pretty_x10(int(result)) + ' would be a leap year in the Gregorian calendar'"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and result % 4 == 0 and result % 100 != 0 and result % 400 == 0 and (result % 10000) % 2800 != 0",
  "link" : "https://www.youtube.com/watch?v=qkt_wmRKYNQ",
  "title": "Leap Years: we can do better",
  "source":"standupmaths",
  "msg" : "lambda f, result, c: format_numbers.to_pretty_x10(int(result)) + ' would be a leap year in the Gregorian-Parkerian calendar'"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and result % 4 == 0 and result % 128 != 0",
  "link" : "https://www.youtube.com/watch?v=qkt_wmRKYNQ",
  "title": "Leap Years: we can do better",
  "source":"standupmaths",
  "msg" : "lambda f, result, c: format_numbers.to_pretty_x10(int(result)) + ' would be a leap year in the 128 Julian-Parkerian calendar'"
 },
 {"test" : "lambda formula, result, context: is_int(result) and result > 0 and result % 4 == 0 and result % 128 != 0 and result % 625024 == 0",
  "link" : "https://www.youtube.com/watch?v=qkt_wmRKYNQ",
  "title": "Leap Years: we can do better",
  "source":"standupmaths",
  "msg" : "lambda f, result, c: format_numbers.to_pretty_x10(int(result)) + ' would be a leap year in the 625000 Julian-Parkerian calendar'"
 },
 {"test" : "lambda formula, result, context: result == 1/4",
  "link" : "https://www.youtube.com/watch?v=owVwjr6pTqc",
  "title": "Paraboloids and The Building which Set Things on Fire",
  "source":"standupmaths",
  "note" : "parabola, tan"
 },
 {"test" : "lambda formula, result, context: result in {4, 6, 8, 20, 12, 30, math.inf, 24}",
  "link" : "https://www.youtube.com/watch?v=G7zT9MljJ3Y",
  "title": "Fair Dice (Part 1)",
  "source":"Numberphile"
 },
 {"test" : "lambda formula, result, context: result in {1000, 1001, 998, 997} or is_close(result, (0.5, 2/3))",
  "link" : "https://www.youtube.com/watch?v=7hJ4Azr--s8",
  "title": "Prisoners in Hats Puzzle: two variations",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: is_close(result, (3.04183997892940221112, 0.760459994732350))",
  "link" : "https://www.youtube.com/watch?v=HrRMnzANHHs",
  "title": "Calculating π by hand",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {1e5, 0.5**10}",
  "link" : "https://www.youtube.com/watch?v=aHU-L3BLd_w",
  "title": "10 coin flips in a row! (for 10^5 subscribers)",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {20, 0, math.inf} or is_close(result, (math.pi, 4/3*math.pi))",
  "link" : "https://www.youtube.com/watch?v=8pj8_zjelDo",
  "title": "The Fractal Menger Sponge and Pi",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 1 <= result <= 18 or '%' in formula or result == 216",
  "link" : "https://www.youtube.com/watch?v=xHh0ui5mi_E",
  "title": "The Three Indistinguishable Dice Puzzle",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {1729, 12, 635318657, 65601, 67402, 83802}",
  "link" : "https://www.youtube.com/watch?v=_o0cIpLQApk",
  "title": "Ramanujan, 1729 and Fermat's Last Theorem",
  "source":"standupmaths",
  "oeis" : "http://oeis.org/A050791"
 },
 {"test" : "lambda formula, result, context: [1, 2, 3] == context['result'][-3:]",
  "link" : "https://www.youtube.com/watch?v=_o0cIpLQApk",
  "title": "Ramanujan, 1729 and Fermat's Last Theorem",
  "source":"standupmaths",
  "msg" : "Why not just use the generating function 1/(1-x)^2?"
 },
 {"test" : "lambda formula, result, context: [1, 4, 9] == context['result'][-3:]",
  "link" : "https://www.youtube.com/watch?v=_o0cIpLQApk",
  "title": "Ramanujan, 1729 and Fermat's Last Theorem",
  "source":"standupmaths",
  "msg" : "Why not just use the generating function (x+1)/(1-x)^3?"
 },
 {"test" : "lambda formula, result, context: [1, 1, 2] == context['result'][-3:]",
  "link" : "https://www.youtube.com/watch?v=_o0cIpLQApk",
  "title": "Ramanujan, 1729 and Fermat's Last Theorem",
  "source":"standupmaths",
  "msg" : "Why not just use the generating function 1/(1-x-x^2)?"
 },
 {"test" : "lambda formula, result, context: is_int(result) and 1 <= result <= 52",
  "link" : "https://www.youtube.com/watch?v=ggH8cKcPOHI",
  "title": "Quick Mathematical Card Trick",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: (is_int(result) and 1 <= result <= 18) or '%' in formula or result {120, 90, 6, 216} or is_error(result)",
  "link" : "https://www.youtube.com/watch?v=hBBftD7gq7Y",
  "title": "SOLUTION: Three Indistinguishable Dice Puzzle",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: False and all(is_int(context['result'][-i]) and 1 <= context['result'][-i] <= 6 for i in (1, 2, 3))",
  "link" : "https://www.youtube.com/watch?v=hBBftD7gq7Y",
  "title": "SOLUTION: Three Indistinguishable Dice Puzzle",
  "source":"standupmaths",
  "msg" : "lambda f, r, context: 'If your results (%d, %d, %d) were dice rolls, we could convert them to two dice rolls with result %s.' % (int(context['result'][-3]), int(context['result'][-2]), int(context['result'][-1]), '(6, 3)' if all(context['result'][-i] == max(context['result'][-3:]) for i in (-3, -2, -1)) else '('+str(int(min(context['result'][-3:])))+', '+str(int(max(context['result'][-3:])))+')' if (len([1 for v in context['result'][-3:] if v==min(context['result'][-3:])]) == 2 or len([1 for v in context['result'][-3:] if v==max(context['result'][-3:])]) == 2) else  )",
  "note" : "TODO: complete the msg function ..."
 },
 {"test" : "lambda formula, result, context: result in {12, 20, 30} or is_close(result, ((2*(1+1/5**.5))**.5, (2*(1-1/5**.5))**.5, 2**.5, GOLDEN_RATIO))",
  "link" : "https://www.youtube.com/watch?v=xVBOlbjiHGI",
  "title": "A new Rhombic Dodecahedron from Croatia!",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {14, 62.5, 67, 67.5} or is_close(result, (40.7605364,-73.9881165, 40.7475166,-73.9902623, 40.7417129,-73.9866145, 40.7362828,-73.9934595, 40.7334896,-73.9846672, 40.730503,-73.9959379, 40.7274296,-73.9929123, 40.7268115,-73.9832778, 40.7226714,-73.9878349, 40.7152103,-74.001972, 40.7147475,-73.9910052, 40.7140132,-73.9990492, 40.712846,-73.9964231, 40.7047231,-74.0104991), 1e-7) or is_error(result)",
  "link" : "https://www.youtube.com/watch?v=yfR1Jkl5R8A",
  "title": "The Best Square Square in New York",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {939, 10016, 1024, 512, 10, 42, 500, 314, 666, 2046, 1000, 256, 420, 2048, 200, 100, 250, 300, 100000, 1023, 50, 1, 1337, 1234, 150, 2036, 600, 188, 183, 160, 85, 78, 72, 68, 66, 64, 63, 63, 50, 49, 47, 43, 40, 40, 38, 37, 36, 34, 33, 32, 32, 31, 914, 510, 411, 8950} or is_close(result, (2045.97, 426239.3, 2036.3, 939.5), 1e-2)",
  "link" : "https://www.youtube.com/watch?v=-9FWBaWah28",
  "title": "SOLUTION: 10 coin flips in a row! (for 10^5 subscribers)",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {190, 1920, 1080, 960, 360, 180} or is_complex(result)",
  "link" : "https://www.youtube.com/watch?v=x0gRcRd_rHs",
  "title": "The maths of spherical video (aka \"360 camera\")",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {36, 6, 8}",
  "link" : "https://www.youtube.com/watch?v=Gh8h8MJFFdI",
  "title": "Puzzle: Is 36 the only triangle-square number?",
  "source":"standupmaths",
  "note" : "formula in {'x^2', 'x*(x+1)/2'}"
 },
 {"test" : "lambda formula, result, context: result in {12, 20, 6}",
  "link" : "https://www.youtube.com/watch?v=cwWBpjeyRS0",
  "title": "Geometry of Footballs and the Cube-shaped Ball",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {1920, 1080, 256, 65536, 50, 128, 110863792} or is_close(result, (2.6e157826, 1e15, 4e17, 1e82), 1e-2, 'pct') or is_close(result, (1924.3, 29368779.7, 13.9, 73.4), 1e-2)",
  "link" : "https://www.youtube.com/watch?v=5Yy_unGaD-w",
  "title": "How many different Youtube videos are possible?",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: is_close(result, (6.67e-11, 5.972e24), 1e-2, 'pct') or is_close(result, math.pi) or is_close(result, (2530.5, 42+10.5/60, 7909.5, 17693, 28474), 1e-1) or result == 5514",
  "link" : "https://www.youtube.com/watch?v=s94Gojs3Ags",
  "title": "How to mathematically calculate a fall through the Earth",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: '^4' in formula or is_close(result, (0, 2.5), 0.1)",
  "link" : "https://www.youtube.com/watch?v=CCuaWqhVvIc",
  "title": "Milk first or last? The correct method for hot tea. (GONE MATHEMATICAL)",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {12, 4, 30, 20, 8} or is_close(result, GOLDEN_RATIO)",
  "link" : "https://www.youtube.com/watch?v=H18pyUN4U1M",
  "title": "Polygons of New York",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {math.inf, 5.1, 0.81, 28.2, 0.16, 0.056}",
  "link" : "https://www.youtube.com/watch?v=55gJgCoDld4",
  "title": "Matt & Hugh: The Euler Disk Which Spins Forever",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {4, 3, 5, 6, 18, 13} or (len(context['result']) >= 6 and [23, 11, 6, 3, 5, 4] == context['result'][-6:])",
  "link" : "https://www.youtube.com/watch?v=LYKn0yUTIU4",
  "title": "Four has Four Letters",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {120, 72, 8640}",
  "link" : "https://www.youtube.com/watch?v=AvO4s3bW-qI",
  "title": "Manchester Mega Pixel: world's largest analogue digital image",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result in {29.97, math.inf, 525, 262.5, 60, 30, 6, 4.5, 6e6, 4.5e6, 0.25, 0.25e6, 25, 625, 6, 6e6, 384, 625, 240} or is_close(result, 4.5e6/15750, 0.2857) or is_close(result, 15734.25, 15.75)",
  "link" : "https://www.youtube.com/watch?v=3GJUM6pCpew",
  "title": "Why is TV 29.97 frames per second?",
  "source":"standupmaths"
 },
 {"test" : "lambda formula, result, context: result == math.inf or (is_real(result) and result > 0 and is_int(math.log2(result)) and math.log2(result) < 0) or is_close(result, math.exp(100), 1e-1, 'pct') or is_close(result, 0.57721566490153286060)",
  "link" : "https://www.youtube.com/watch?v=4k1jegU4Wb4",
  "title": "The mystery of 0.577",
  "source":"Numberphile"
 }

]
